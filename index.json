[{"content":"Live on time, emit no evil\n","date":"8 February 2021","permalink":"/posts/palindrome/","section":"Posts","summary":"Live on time, emit no evil","title":"A man, a plan, a canal – Panama."},{"content":"","date":"8 February 2021","permalink":"/","section":"patricktrainer","summary":"","title":"patricktrainer"},{"content":"","date":"8 February 2021","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"Dia-taxis# Diátaxis # Created: October 26, 2022 1:03 AM URL: https://diataxis.fr/ A systematic framework for technical documentation authoring. The Diátaxis framework aims to solve the problem of structure in technical documentation. It adopts a systematic approach to understanding the needs of documentation users in their cycle of interaction with a product. Diátaxis identifies four modes of documentation - tutorials, how-to guides, technical reference and explanation. Dia%CC%81taxis%20469b500281904446b4fe5b7867e08d79/diataxis.png Technical documentation should be structured explicitly around these four types, and should keep them all separate and distinct from each other.\n—Adam Schwartz (@AdamSchwartz)\nDiátaxis promises to make documentation and projects better, and the teams that work with them more successful. Diátaxis is proven in practice across a wide variety of fields and applications, in large and small, open and proprietary documentation projects.\n","date":"1 January 2021","permalink":"/posts/dia-taxis/","section":"Posts","summary":"Dia-taxis# Diátaxis # Created: October 26, 2022 1:03 AM URL: https://diataxis.fr/ A systematic framework for technical documentation authoring. The Diátaxis framework aims to solve the problem of structure in technical documentation.","title":"Dia-taxis"},{"content":"Create # ","date":"1 January 0001","permalink":"/posts/data-science-in-production-32502ff17996462eb4b06c9fc3ef42bb/untitled-database-54135777308e4261a5b6977a129e216d/create-6d35fab6458c46409613d62eaf2bb5d8/","section":"Posts","summary":"Create # ","title":""},{"content":"Delete # ","date":"1 January 0001","permalink":"/posts/data-science-in-production-32502ff17996462eb4b06c9fc3ef42bb/untitled-database-54135777308e4261a5b6977a129e216d/delete-7ff385b1b03b4b0a8699bed4afe5981e/","section":"Posts","summary":"Delete # ","title":""},{"content":"Read # ","date":"1 January 0001","permalink":"/posts/data-science-in-production-32502ff17996462eb4b06c9fc3ef42bb/untitled-database-54135777308e4261a5b6977a129e216d/read-4e285e6dc1b34db7b4dd9426972ca2da/","section":"Posts","summary":"Read # ","title":""},{"content":"Update # ","date":"1 January 0001","permalink":"/posts/data-science-in-production-32502ff17996462eb4b06c9fc3ef42bb/untitled-database-54135777308e4261a5b6977a129e216d/update-2526648c410a4f88b05bec5e5daba5f3/","section":"Posts","summary":"Update # ","title":""},{"content":"App.vue # ","date":"1 January 0001","permalink":"/posts/developing-a-single-page-app-with-flask-and-vue-js-900a7939c8244b579780a034209512c4/untitled-database-d26b4f84df54484390e9c439d0ebc7dd/app-vue-3ebd985ba5f04ae99ec6fd596581d5d6/","section":"Posts","summary":"App.vue # ","title":""},{"content":"\u0026ldquo;assets\u0026rdquo; # ","date":"1 January 0001","permalink":"/posts/developing-a-single-page-app-with-flask-and-vue-js-900a7939c8244b579780a034209512c4/untitled-database-d26b4f84df54484390e9c439d0ebc7dd/assets-c16ef5dc30f04894912bb3b91f8ab297/","section":"Posts","summary":"\u0026ldquo;assets\u0026rdquo; # ","title":""},{"content":"\u0026ldquo;components\u0026rdquo; # ","date":"1 January 0001","permalink":"/posts/developing-a-single-page-app-with-flask-and-vue-js-900a7939c8244b579780a034209512c4/untitled-database-d26b4f84df54484390e9c439d0ebc7dd/components-5a516a6fd2a4441e852de9c6e4c2e931/","section":"Posts","summary":"\u0026ldquo;components\u0026rdquo; # ","title":""},{"content":"main.js # ","date":"1 January 0001","permalink":"/posts/developing-a-single-page-app-with-flask-and-vue-js-900a7939c8244b579780a034209512c4/untitled-database-d26b4f84df54484390e9c439d0ebc7dd/main-js-de04efb6d1d2437da8159cad07c9fc7b/","section":"Posts","summary":"main.js # ","title":""},{"content":"router.js # ","date":"1 January 0001","permalink":"/posts/developing-a-single-page-app-with-flask-and-vue-js-900a7939c8244b579780a034209512c4/untitled-database-d26b4f84df54484390e9c439d0ebc7dd/router-js-c019aaf121fe489f9aa255edaad78aee/","section":"Posts","summary":"router.js # ","title":""},{"content":"\u0026ldquo;views\u0026rdquo; # ","date":"1 January 0001","permalink":"/posts/developing-a-single-page-app-with-flask-and-vue-js-900a7939c8244b579780a034209512c4/untitled-database-d26b4f84df54484390e9c439d0ebc7dd/views-1f938f174a2b4f28a2f81514c2b558eb/","section":"Posts","summary":"\u0026ldquo;views\u0026rdquo; # ","title":""},{"content":"Cashier crew # ?: ? Client: Application\n","date":"1 January 0001","permalink":"/posts/distill-why-do-we-need-flask-celery-and-redis-w-4b3cfc055f3f44beb14348e7163ece7b/untitled-database-c3d33a065be34178b63bf9ef5a5aa481/cashier-crew-73983214916946559a1767f8cf3de2e8/","section":"Posts","summary":"Cashier crew # ?: ? Client: Application","title":""},{"content":"Database behind LED screen # ?: ? Client: Database backend\n","date":"1 January 0001","permalink":"/posts/distill-why-do-we-need-flask-celery-and-redis-w-4b3cfc055f3f44beb14348e7163ece7b/untitled-database-c3d33a065be34178b63bf9ef5a5aa481/database-behind-led-screen-f893f2a7c2a641caa3a8fda4c4172b0f/","section":"Posts","summary":"Database behind LED screen # ?: ? Client: Database backend","title":""},{"content":"Worker crew # ?: ? Client: Worker\n","date":"1 January 0001","permalink":"/posts/distill-why-do-we-need-flask-celery-and-redis-w-4b3cfc055f3f44beb14348e7163ece7b/untitled-database-c3d33a065be34178b63bf9ef5a5aa481/worker-crew-9cbc30f2e34046bab6a6bda4b783618d/","section":"Posts","summary":"Worker crew # ?: ? Client: Worker","title":""},{"content":"Cashier crew # Client: Application Client 1: Flask Application\n","date":"1 January 0001","permalink":"/posts/distill-why-do-we-need-flask-celery-and-redis-w-4b3cfc055f3f44beb14348e7163ece7b/untitled-database-e3c404ffa74b4de58589fc30cbef5bd0/cashier-crew-609ce568e9224f44adfaa84fee89bc4c/","section":"Posts","summary":"Cashier crew # Client: Application Client 1: Flask Application","title":""},{"content":"Database behind LED screen # Client: Database backend Client 1: Redis\n","date":"1 January 0001","permalink":"/posts/distill-why-do-we-need-flask-celery-and-redis-w-4b3cfc055f3f44beb14348e7163ece7b/untitled-database-e3c404ffa74b4de58589fc30cbef5bd0/database-behind-led-screen-2f8ac98bc449469a8dad55750e102ad9/","section":"Posts","summary":"Database behind LED screen # Client: Database backend Client 1: Redis","title":""},{"content":"Worker crew # Client: Worker Client 1: Celery Worker\n","date":"1 January 0001","permalink":"/posts/distill-why-do-we-need-flask-celery-and-redis-w-4b3cfc055f3f44beb14348e7163ece7b/untitled-database-e3c404ffa74b4de58589fc30cbef5bd0/worker-crew-d263a75aad5e4025a204f8fe3f5d7182/","section":"Posts","summary":"Worker crew # Client: Worker Client 1: Celery Worker","title":""},{"content":"Want to start a startup? Get funded by Y Combinator. # ","date":"1 January 0001","permalink":"/posts/do-things-that-dont-scale-9179e636a0bc4e49b88556b95add3b6d/untitled-database-ff2e5d8904c448018e4120037961573c/want-to-start-a-startup-get-funded-by-y-combinator-f066c995964047b3a9fea80b3c55099a/","section":"Posts","summary":"Want to start a startup? Get funded by Y Combinator. # ","title":""},{"content":"Want to start a startup? Get funded by Y Combinator. One of the most common types of advice we give at Y Combinator is to do things that don\u0026rsquo;t scale. A lot of would-be founders believe that startups either take off or don\u0026rsquo;t. You build something, make it available, and if you\u0026rsquo;ve made a better mousetrap, people beat a path to your door as promised. Or they don\u0026rsquo;t, in which case the market must not exist. [1]Actually startups take off because the founders make them take off. There may be a handful that just grew by themselves, but usually it takes some sort of push to get them going. A good metaphor would be the cranks that car engines had before they got electric starters. Once the engine was going, it would keep going, but there was a separate and laborious process to get it going.RecruitThe most common unscalable thing founders have to do at the start is to recruit users manually. Nearly all startups have to. You can\u0026rsquo;t wait for users to come to you. You have to go out and get them.Stripe is one of the most successful startups we\u0026rsquo;ve funded, and the problem they solved was an urgent one. If anyone could have sat back and waited for users, it was Stripe. But in fact they\u0026rsquo;re famous within YC for aggressive early user acquisition.Startups building things for other startups have a big pool of potential users in the other companies we\u0026rsquo;ve funded, and none took better advantage of it than Stripe. At YC we use the term \u0026ldquo;Collison installation\u0026rdquo; for the technique they invented. More diffident founders ask \u0026ldquo;Will you try our beta?\u0026rdquo; and if the answer is yes, they say \u0026ldquo;Great, we\u0026rsquo;ll send you a link.\u0026rdquo; But the Collison brothers weren\u0026rsquo;t going to wait. When anyone agreed to try Stripe they\u0026rsquo;d say \u0026ldquo;Right then, give me your laptop\u0026rdquo; and set them up on the spot.There are two reasons founders resist going out and recruiting users individually. One is a combination of shyness and laziness. They\u0026rsquo;d rather sit at home writing code than go out and talk to a bunch of strangers and probably be rejected by most of them. But for a startup to succeed, at least one founder (usually the CEO) will have to spend a lot of time on sales and marketing. [2]The other reason founders ignore this path is that the absolute numbers seem so small at first. This can\u0026rsquo;t be how the big, famous startups got started, they think. The mistake they make is to underestimate the power of compound growth. We encourage every startup to measure their progress by weekly growth rate. If you have 100 users, you need to get 10 more next week to grow 10% a week. And while 110 may not seem much better than 100, if you keep growing at 10% a week you\u0026rsquo;ll be surprised how big the numbers get. After a year you\u0026rsquo;ll have 14,000 users, and after 2 years you\u0026rsquo;ll have 2 million.You\u0026rsquo;ll be doing different things when you\u0026rsquo;re acquiring users a thousand at a time, and growth has to slow down eventually. But if the market exists you can usually start by recruiting users manually and then gradually switch to less manual methods. [3]Airbnb is a classic example of this technique. Marketplaces are so hard to get rolling that you should expect to take heroic measures at first. In Airbnb\u0026rsquo;s case, these consisted of going door to door in New York, recruiting new users and helping existing ones improve their listings. When I remember the Airbnbs during YC, I picture them with rolly bags, because when they showed up for tuesday dinners they\u0026rsquo;d always just flown back from somewhere.FragileAirbnb now seems like an unstoppable juggernaut, but early on it was so fragile that about 30 days of going out and engaging in person with users made the difference between success and failure.That initial fragility was not a unique feature of Airbnb. Almost all startups are fragile initially. And that\u0026rsquo;s one of the biggest things inexperienced founders and investors (and reporters and know-it-alls on forums) get wrong about them. They unconsciously judge larval startups by the standards of established ones. They\u0026rsquo;re like someone looking at a newborn baby and concluding \u0026ldquo;there\u0026rsquo;s no way this tiny creature could ever accomplish anything.\u0026ldquo;It\u0026rsquo;s harmless if reporters and know-it-alls dismiss your startup. They always get things wrong. It\u0026rsquo;s even ok if investors dismiss your startup; they\u0026rsquo;ll change their minds when they see growth. The big danger is that you\u0026rsquo;ll dismiss your startup yourself. I\u0026rsquo;ve seen it happen. I often have to encourage founders who don\u0026rsquo;t see the full potential of what they\u0026rsquo;re building. Even Bill Gates made that mistake. He returned to Harvard for the fall semester after starting Microsoft. He didn\u0026rsquo;t stay long, but he wouldn\u0026rsquo;t have returned at all if he\u0026rsquo;d realized Microsoft was going to be even a fraction of the size it turned out to be. [4]The question to ask about an early stage startup is not \u0026ldquo;is this company taking over the world?\u0026rdquo; but \u0026ldquo;how big could this company get if the founders did the right things?\u0026rdquo; And the right things often seem both laborious and inconsequential at the time. Microsoft can\u0026rsquo;t have seemed very impressive when it was just a couple guys in Albuquerque writing Basic interpreters for a market of a few thousand hobbyists (as they were then called), but in retrospect that was the optimal path to dominating microcomputer software. And I know Brian Chesky and Joe Gebbia didn\u0026rsquo;t feel like they were en route to the big time as they were taking \u0026ldquo;professional\u0026rdquo; photos of their first hosts\u0026rsquo; apartments. They were just trying to survive. But in retrospect that too was the optimal path to dominating a big market.How do you find users to recruit manually? If you build something to solve your own problems, then you only have to find your peers, which is usually straightforward. Otherwise you\u0026rsquo;ll have to make a more deliberate effort to locate the most promising vein of users. The usual way to do that is to get some initial set of users by doing a comparatively untargeted launch, and then to observe which kind seem most enthusiastic, and seek out more like them. For example, Ben Silbermann noticed that a lot of the earliest Pinterest users were interested in design, so he went to a conference of design bloggers to recruit users, and that worked well. [5]DelightYou should take extraordinary measures not just to acquire users, but also to make them happy. For as long as they could (which turned out to be surprisingly long), Wufoo sent each new user a hand-written thank you note. Your first users should feel that signing up with you was one of the best choices they ever made. And you in turn should be racking your brains to think of new ways to delight them.Why do we have to teach startups this? Why is it counterintuitive for founders? Three reasons, I think.One is that a lot of startup founders are trained as engineers, and customer service is not part of the training of engineers. You\u0026rsquo;re supposed to build things that are robust and elegant, not be slavishly attentive to individual users like some kind of salesperson. Ironically, part of the reason engineering is traditionally averse to handholding is that its traditions date from a time when engineers were less powerful — when they were only in charge of their narrow domain of building things, rather than running the whole show. You can be ornery when you\u0026rsquo;re Scotty, but not when you\u0026rsquo;re Kirk.Another reason founders don\u0026rsquo;t focus enough on individual customers is that they worry it won\u0026rsquo;t scale. But when founders of larval startups worry about this, I point out that in their current state they have nothing to lose. Maybe if they go out of their way to make existing users super happy, they\u0026rsquo;ll one day have too many to do so much for. That would be a great problem to have. See if you can make it happen. And incidentally, when it does, you\u0026rsquo;ll find that delighting customers scales better than you expected. Partly because you can usually find ways to make anything scale more than you would have predicted, and partly because delighting customers will by then have permeated your culture.I have never once seen a startup lured down a blind alley by trying too hard to make their initial users happy.But perhaps the biggest thing preventing founders from realizing how attentive they could be to their users is that they\u0026rsquo;ve never experienced such attention themselves. Their standards for customer service have been set by the companies they\u0026rsquo;ve been customers of, which are mostly big ones. Tim Cook doesn\u0026rsquo;t send you a hand-written note after you buy a laptop. He can\u0026rsquo;t. But you can. That\u0026rsquo;s one advantage of being small: you can provide a level of service no big company can. [6]Once you realize that existing conventions are not the upper bound on user experience, it\u0026rsquo;s interesting in a very pleasant way to think about how far you could go to delight your users.ExperienceI was trying to think of a phrase to convey how extreme your attention to users should be, and I realized Steve Jobs had already done it: insanely great. Steve wasn\u0026rsquo;t just using \u0026ldquo;insanely\u0026rdquo; as a synonym for \u0026ldquo;very.\u0026rdquo; He meant it more literally — that one should focus on quality of execution to a degree that in everyday life would be considered pathological.All the most successful startups we\u0026rsquo;ve funded have, and that probably doesn\u0026rsquo;t surprise would-be founders. What novice founders don\u0026rsquo;t get is what insanely great translates to in a larval startup. When Steve Jobs started using that phrase, Apple was already an established company. He meant the Mac (and its documentation and even packaging — such is the nature of obsession) should be insanely well designed and manufactured. That\u0026rsquo;s not hard for engineers to grasp. It\u0026rsquo;s just a more extreme version of designing a robust and elegant product.What founders have a hard time grasping (and Steve himself might have had a hard time grasping) is what insanely great morphs into as you roll the time slider back to the first couple months of a startup\u0026rsquo;s life. It\u0026rsquo;s not the product that should be insanely great, but the experience of being your user. The product is just one component of that. For a big company it\u0026rsquo;s necessarily the dominant one. But you can and should give users an insanely great experience with an early, incomplete, buggy product, if you make up the difference with attentiveness.Can, perhaps, but should? Yes. Over-engaging with early users is not just a permissible technique for getting growth rolling. For most successful startups it\u0026rsquo;s a necessary part of the feedback loop that makes the product good. Making a better mousetrap is not an atomic operation. Even if you start the way most successful startups have, by building something you yourself need, the first thing you build is never quite right. And except in domains with big penalties for making mistakes, it\u0026rsquo;s often better not to aim for perfection initially. In software, especially, it usually works best to get something in front of users as soon as it has a quantum of utility, and then see what they do with it. Perfectionism is often an excuse for procrastination, and in any case your initial model of users is always inaccurate, even if you\u0026rsquo;re one of them. [7]The feedback you get from engaging directly with your earliest users will be the best you ever get. When you\u0026rsquo;re so big you have to resort to focus groups, you\u0026rsquo;ll wish you could go over to your users\u0026rsquo; homes and offices and watch them use your stuff like you did when there were only a handful of them.FireSometimes the right unscalable trick is to focus on a deliberately narrow market. It\u0026rsquo;s like keeping a fire contained at first to get it really hot before adding more logs.That\u0026rsquo;s what Facebook did. At first it was just for Harvard students. In that form it only had a potential market of a few thousand people, but because they felt it was really for them, a critical mass of them signed up. After Facebook stopped being for Harvard students, it remained for students at specific colleges for quite a while. When I interviewed Mark Zuckerberg at Startup School, he said that while it was a lot of work creating course lists for each school, doing that made students feel the site was their natural home.Any startup that could be described as a marketplace usually has to start in a subset of the market, but this can work for other startups as well. It\u0026rsquo;s always worth asking if there\u0026rsquo;s a subset of the market in which you can get a critical mass of users quickly. [8]Most startups that use the contained fire strategy do it unconsciously. They build something for themselves and their friends, who happen to be the early adopters, and only realize later that they could offer it to a broader market. The strategy works just as well if you do it unconsciously. The biggest danger of not being consciously aware of this pattern is for those who naively discard part of it. E.g. if you don\u0026rsquo;t build something for yourself and your friends, or even if you do, but you come from the corporate world and your friends are not early adopters, you\u0026rsquo;ll no longer have a perfect initial market handed to you on a platter.Among companies, the best early adopters are usually other startups. They\u0026rsquo;re more open to new things both by nature and because, having just been started, they haven\u0026rsquo;t made all their choices yet. Plus when they succeed they grow fast, and you with them. It was one of many unforeseen advantages of the YC model (and specifically of making YC big) that B2B startups now have an instant market of hundreds of other startups ready at hand.MerakiFor hardware startups there\u0026rsquo;s a variant of doing things that don\u0026rsquo;t scale that we call \u0026ldquo;pulling a Meraki.\u0026rdquo; Although we didn\u0026rsquo;t fund Meraki, the founders were Robert Morris\u0026rsquo;s grad students, so we know their history. They got started by doing something that really doesn\u0026rsquo;t scale: assembling their routers themselves.Hardware startups face an obstacle that software startups don\u0026rsquo;t. The minimum order for a factory production run is usually several hundred thousand dollars. Which can put you in a catch-22: without a product you can\u0026rsquo;t generate the growth you need to raise the money to manufacture your product. Back when hardware startups had to rely on investors for money, you had to be pretty convincing to overcome this. The arrival of crowdfunding (or more precisely, preorders) has helped a lot. But even so I\u0026rsquo;d advise startups to pull a Meraki initially if they can. That\u0026rsquo;s what Pebble did. The Pebbles assembled the first several hundred watches themselves. If they hadn\u0026rsquo;t gone through that phase, they probably wouldn\u0026rsquo;t have sold $10 million worth of watches when they did go on Kickstarter.Like paying excessive attention to early customers, fabricating things yourself turns out to be valuable for hardware startups. You can tweak the design faster when you\u0026rsquo;re the factory, and you learn things you\u0026rsquo;d never have known otherwise. Eric Migicovsky of Pebble said one of things he learned was \u0026ldquo;how valuable it was to source good screws.\u0026rdquo; Who knew?ConsultSometimes we advise founders of B2B startups to take over-engagement to an extreme, and to pick a single user and act as if they were consultants building something just for that one user. The initial user serves as the form for your mold; keep tweaking till you fit their needs perfectly, and you\u0026rsquo;ll usually find you\u0026rsquo;ve made something other users want too. Even if there aren\u0026rsquo;t many of them, there are probably adjacent territories that have more. As long as you can find just one user who really needs something and can act on that need, you\u0026rsquo;ve got a toehold in making something people want, and that\u0026rsquo;s as much as any startup needs initially. [9]Consulting is the canonical example of work that doesn\u0026rsquo;t scale. But (like other ways of bestowing one\u0026rsquo;s favors liberally) it\u0026rsquo;s safe to do it so long as you\u0026rsquo;re not being paid to. That\u0026rsquo;s where companies cross the line. So long as you\u0026rsquo;re a product company that\u0026rsquo;s merely being extra attentive to a customer, they\u0026rsquo;re very grateful even if you don\u0026rsquo;t solve all their problems. But when they start paying you specifically for that attentiveness — when they start paying you by the hour — they expect you to do everything.Another consulting-like technique for recruiting initially lukewarm users is to use your software yourselves on their behalf. We did that at Viaweb. When we approached merchants asking if they wanted to use our software to make online stores, some said no, but they\u0026rsquo;d let us make one for them. Since we would do anything to get users, we did. We felt pretty lame at the time. Instead of organizing big strategic e-commerce partnerships, we were trying to sell luggage and pens and men\u0026rsquo;s shirts. But in retrospect it was exactly the right thing to do, because it taught us how it would feel to merchants to use our software. Sometimes the feedback loop was near instantaneous: in the middle of building some merchant\u0026rsquo;s site I\u0026rsquo;d find I needed a feature we didn\u0026rsquo;t have, so I\u0026rsquo;d spend a couple hours implementing it and then resume building the site.ManualThere\u0026rsquo;s a more extreme variant where you don\u0026rsquo;t just use your software, but are your software. When you only have a small number of users, you can sometimes get away with doing by hand things that you plan to automate later. This lets you launch faster, and when you do finally automate yourself out of the loop, you\u0026rsquo;ll know exactly what to build because you\u0026rsquo;ll have muscle memory from doing it yourself.When manual components look to the user like software, this technique starts to have aspects of a practical joke. For example, the way Stripe delivered \u0026ldquo;instant\u0026rdquo; merchant accounts to its first users was that the founders manually signed them up for traditional merchant accounts behind the scenes.Some startups could be entirely manual at first. If you can find someone with a problem that needs solving and you can solve it manually, go ahead and do that for as long as you can, and then gradually automate the bottlenecks. It would be a little frightening to be solving users\u0026rsquo; problems in a way that wasn\u0026rsquo;t yet automatic, but less frightening than the far more common case of having something automatic that doesn\u0026rsquo;t yet solve anyone\u0026rsquo;s problems.BigI should mention one sort of initial tactic that usually doesn\u0026rsquo;t work: the Big Launch. I occasionally meet founders who seem to believe startups are projectiles rather than powered aircraft, and that they\u0026rsquo;ll make it big if and only if they\u0026rsquo;re launched with sufficient initial velocity. They want to launch simultaneously in 8 different publications, with embargoes. And on a tuesday, of course, since they read somewhere that\u0026rsquo;s the optimum day to launch something.It\u0026rsquo;s easy to see how little launches matter. Think of some successful startups. How many of their launches do you remember? All you need from a launch is some initial core of users. How well you\u0026rsquo;re doing a few months later will depend more on how happy you made those users than how many there were of them. [10]So why do founders think launches matter? A combination of solipsism and laziness. They think what they\u0026rsquo;re building is so great that everyone who hears about it will immediately sign up. Plus it would be so much less work if you could get users merely by broadcasting your existence, rather than recruiting them one at a time. But even if what you\u0026rsquo;re building really is great, getting users will always be a gradual process — partly because great things are usually also novel, but mainly because users have other things to think about.Partnerships too usually don\u0026rsquo;t work. They don\u0026rsquo;t work for startups in general, but they especially don\u0026rsquo;t work as a way to get growth started. It\u0026rsquo;s a common mistake among inexperienced founders to believe that a partnership with a big company will be their big break. Six months later they\u0026rsquo;re all saying the same thing: that was way more work than we expected, and we ended up getting practically nothing out of it. [11]It\u0026rsquo;s not enough just to do something extraordinary initially. You have to make an extraordinary effort initially. Any strategy that omits the effort — whether it\u0026rsquo;s expecting a big launch to get you users, or a big partner — is ipso facto suspect.VectorThe need to do something unscalably laborious to get started is so nearly universal that it might be a good idea to stop thinking of startup ideas as scalars. Instead we should try thinking of them as pairs of what you\u0026rsquo;re going to build, plus the unscalable thing(s) you\u0026rsquo;re going to do initially to get the company going.It could be interesting to start viewing startup ideas this way, because now that there are two components you can try to be imaginative about the second as well as the first. But in most cases the second component will be what it usually is — recruit users manually and give them an overwhelmingly good experience — and the main benefit of treating startups as vectors will be to remind founders they need to work hard in two dimensions. [12]In the best case, both components of the vector contribute to your company\u0026rsquo;s DNA: the unscalable things you have to do to get started are not merely a necessary evil, but change the company permanently for the better. If you have to be aggressive about user acquisition when you\u0026rsquo;re small, you\u0026rsquo;ll probably still be aggressive when you\u0026rsquo;re big. If you have to manufacture your own hardware, or use your software on users\u0026rsquo;s behalf, you\u0026rsquo;ll learn things you couldn\u0026rsquo;t have learned otherwise. And most importantly, if you have to work hard to delight users when you only have a handful of them, you\u0026rsquo;ll keep doing it when you have a lot.Notes[1] Actually Emerson never mentioned mousetraps specifically. He wrote \u0026ldquo;If a man has good corn or wood, or boards, or pigs, to sell, or can make better chairs or knives, crucibles or church organs, than anybody else, you will find a broad hard-beaten road to his house, though it be in the woods.\u0026quot;[2] Thanks to Sam Altman for suggesting I make this explicit. And no, you can\u0026rsquo;t avoid doing sales by hiring someone to do it for you. You have to do sales yourself initially. Later you can hire a real salesperson to replace you.[3] The reason this works is that as you get bigger, your size helps you grow. Patrick Collison wrote \u0026ldquo;At some point, there was a very noticeable change in how Stripe felt. It tipped from being this boulder we had to push to being a train car that in fact had its own momentum.\u0026quot;[4] One of the more subtle ways in which YC can help founders is by calibrating their ambitions, because we know exactly how a lot of successful startups looked when they were just getting started.[5] If you\u0026rsquo;re building something for which you can\u0026rsquo;t easily get a small set of users to observe — e.g. enterprise software — and in a domain where you have no connections, you\u0026rsquo;ll have to rely on cold calls and introductions. But should you even be working on such an idea?[6] Garry Tan pointed out an interesting trap founders fall into in the beginning. They want so much to seem big that they imitate even the flaws of big companies, like indifference to individual users. This seems to them more \u0026ldquo;professional.\u0026rdquo; Actually it\u0026rsquo;s better to embrace the fact that you\u0026rsquo;re small and use whatever advantages that brings.[7] Your user model almost couldn\u0026rsquo;t be perfectly accurate, because users\u0026rsquo; needs often change in response to what you build for them. Build them a microcomputer, and suddenly they need to run spreadsheets on it, because the arrival of your new microcomputer causes someone to invent the spreadsheet.[8] If you have to choose between the subset that will sign up quickest and those that will pay the most, it\u0026rsquo;s usually best to pick the former, because those are probably the early adopters. They\u0026rsquo;ll have a better influence on your product, and they won\u0026rsquo;t make you expend as much effort on sales. And though they have less money, you don\u0026rsquo;t need that much to maintain your target growth rate early on.[9] Yes, I can imagine cases where you could end up making something that was really only useful for one user. But those are usually obvious, even to inexperienced founders. So if it\u0026rsquo;s not obvious you\u0026rsquo;d be making something for a market of one, don\u0026rsquo;t worry about that danger.[10] There may even be an inverse correlation between launch magnitude and success. The only launches I remember are famous flops like the Segway and Google Wave. Wave is a particularly alarming example, because I think it was actually a great idea that was killed partly by its overdone launch.[11] Google grew big on the back of Yahoo, but that wasn\u0026rsquo;t a partnership. Yahoo was their customer.[12] It will also remind founders that an idea where the second component is empty — an idea where there is nothing you can do to get going, e.g. because you have no way to find users to recruit manually — is probably a bad idea, at least for those founders.Thanks to Sam Altman, Paul Buchheit, Patrick Collison, Kevin Hale, Steven Levy, Jessica Livingston, Geoff Ralston, and Garry Tan for reading drafts of this. # Want to start a startup? Get funded by Y Combinator. One of the most common types of advice we give at Y Combinator is to do things that don\u0026rsquo;t scale. A lot of would-be founders believe that startups either take off or don\u0026rsquo;t. You build something, make it available, and if you\u0026rsquo;ve made a better mousetrap, people beat a path to your door as promised. Or they don\u0026rsquo;t, in which case the market must not exist. [1]Actually startups take off because the founders make them take off. There may be a handful that just grew by themselves, but usually it takes some sort of push to get them going. A good metaphor would be the cranks that car engines had before they got electric starters. Once the engine was going, it would keep going, but there was a separate and laborious process to get it going.RecruitThe most common unscalable thing founders have to do at the start is to recruit users manually. Nearly all startups have to. You can\u0026rsquo;t wait for users to come to you. You have to go out and get them.Stripe is one of the most successful startups we\u0026rsquo;ve funded, and the problem they solved was an urgent one. If anyone could have sat back and waited for users, it was Stripe. But in fact they\u0026rsquo;re famous within YC for aggressive early user acquisition.Startups building things for other startups have a big pool of potential users in the other companies we\u0026rsquo;ve funded, and none took better advantage of it than Stripe. At YC we use the term \u0026ldquo;Collison installation\u0026rdquo; for the technique they invented. More diffident founders ask \u0026ldquo;Will you try our beta?\u0026rdquo; and if the answer is yes, they say \u0026ldquo;Great, we\u0026rsquo;ll send you a link.\u0026rdquo; But the Collison brothers weren\u0026rsquo;t going to wait. When anyone agreed to try Stripe they\u0026rsquo;d say \u0026ldquo;Right then, give me your laptop\u0026rdquo; and set them up on the spot.There are two reasons founders resist going out and recruiting users individually. One is a combination of shyness and laziness. They\u0026rsquo;d rather sit at home writing code than go out and talk to a bunch of strangers and probably be rejected by most of them. But for a startup to succeed, at least one founder (usually the CEO) will have to spend a lot of time on sales and marketing. [2]The other reason founders ignore this path is that the absolute numbers seem so small at first. This can\u0026rsquo;t be how the big, famous startups got started, they think. The mistake they make is to underestimate the power of compound growth. We encourage every startup to measure their progress by weekly growth rate. If you have 100 users, you need to get 10 more next week to grow 10% a week. And while 110 may not seem much better than 100, if you keep growing at 10% a week you\u0026rsquo;ll be surprised how big the numbers get. After a year you\u0026rsquo;ll have 14,000 users, and after 2 years you\u0026rsquo;ll have 2 million.You\u0026rsquo;ll be doing different things when you\u0026rsquo;re acquiring users a thousand at a time, and growth has to slow down eventually. But if the market exists you can usually start by recruiting users manually and then gradually switch to less manual methods. [3]Airbnb is a classic example of this technique. Marketplaces are so hard to get rolling that you should expect to take heroic measures at first. In Airbnb\u0026rsquo;s case, these consisted of going door to door in New York, recruiting new users and helping existing ones improve their listings. When I remember the Airbnbs during YC, I picture them with rolly bags, because when they showed up for tuesday dinners they\u0026rsquo;d always just flown back from somewhere.FragileAirbnb now seems like an unstoppable juggernaut, but early on it was so fragile that about 30 days of going out and engaging in person with users made the difference between success and failure.That initial fragility was not a unique feature of Airbnb. Almost all startups are fragile initially. And that\u0026rsquo;s one of the biggest things inexperienced founders and investors (and reporters and know-it-alls on forums) get wrong about them. They unconsciously judge larval startups by the standards of established ones. They\u0026rsquo;re like someone looking at a newborn baby and concluding \u0026ldquo;there\u0026rsquo;s no way this tiny creature could ever accomplish anything.\u0026ldquo;It\u0026rsquo;s harmless if reporters and know-it-alls dismiss your startup. They always get things wrong. It\u0026rsquo;s even ok if investors dismiss your startup; they\u0026rsquo;ll change their minds when they see growth. The big danger is that you\u0026rsquo;ll dismiss your startup yourself. I\u0026rsquo;ve seen it happen. I often have to encourage founders who don\u0026rsquo;t see the full potential of what they\u0026rsquo;re building. Even Bill Gates made that mistake. He returned to Harvard for the fall semester after starting Microsoft. He didn\u0026rsquo;t stay long, but he wouldn\u0026rsquo;t have returned at all if he\u0026rsquo;d realized Microsoft was going to be even a fraction of the size it turned out to be. [4]The question to ask about an early stage startup is not \u0026ldquo;is this company taking over the world?\u0026rdquo; but \u0026ldquo;how big could this company get if the founders did the right things?\u0026rdquo; And the right things often seem both laborious and inconsequential at the time. Microsoft can\u0026rsquo;t have seemed very impressive when it was just a couple guys in Albuquerque writing Basic interpreters for a market of a few thousand hobbyists (as they were then called), but in retrospect that was the optimal path to dominating microcomputer software. And I know Brian Chesky and Joe Gebbia didn\u0026rsquo;t feel like they were en route to the big time as they were taking \u0026ldquo;professional\u0026rdquo; photos of their first hosts\u0026rsquo; apartments. They were just trying to survive. But in retrospect that too was the optimal path to dominating a big market.How do you find users to recruit manually? If you build something to solve your own problems, then you only have to find your peers, which is usually straightforward. Otherwise you\u0026rsquo;ll have to make a more deliberate effort to locate the most promising vein of users. The usual way to do that is to get some initial set of users by doing a comparatively untargeted launch, and then to observe which kind seem most enthusiastic, and seek out more like them. For example, Ben Silbermann noticed that a lot of the earliest Pinterest users were interested in design, so he went to a conference of design bloggers to recruit users, and that worked well. [5]DelightYou should take extraordinary measures not just to acquire users, but also to make them happy. For as long as they could (which turned out to be surprisingly long), Wufoo sent each new user a hand-written thank you note. Your first users should feel that signing up with you was one of the best choices they ever made. And you in turn should be racking your brains to think of new ways to delight them.Why do we have to teach startups this? Why is it counterintuitive for founders? Three reasons, I think.One is that a lot of startup founders are trained as engineers, and customer service is not part of the training of engineers. You\u0026rsquo;re supposed to build things that are robust and elegant, not be slavishly attentive to individual users like some kind of salesperson. Ironically, part of the reason engineering is traditionally averse to handholding is that its traditions date from a time when engineers were less powerful — when they were only in charge of their narrow domain of building things, rather than running the whole show. You can be ornery when you\u0026rsquo;re Scotty, but not when you\u0026rsquo;re Kirk.Another reason founders don\u0026rsquo;t focus enough on individual customers is that they worry it won\u0026rsquo;t scale. But when founders of larval startups worry about this, I point out that in their current state they have nothing to lose. Maybe if they go out of their way to make existing users super happy, they\u0026rsquo;ll one day have too many to do so much for. That would be a great problem to have. See if you can make it happen. And incidentally, when it does, you\u0026rsquo;ll find that delighting customers scales better than you expected. Partly because you can usually find ways to make anything scale more than you would have predicted, and partly because delighting customers will by then have permeated your culture.I have never once seen a startup lured down a blind alley by trying too hard to make their initial users happy.But perhaps the biggest thing preventing founders from realizing how attentive they could be to their users is that they\u0026rsquo;ve never experienced such attention themselves. Their standards for customer service have been set by the companies they\u0026rsquo;ve been customers of, which are mostly big ones. Tim Cook doesn\u0026rsquo;t send you a hand-written note after you buy a laptop. He can\u0026rsquo;t. But you can. That\u0026rsquo;s one advantage of being small: you can provide a level of service no big company can. [6]Once you realize that existing conventions are not the upper bound on user experience, it\u0026rsquo;s interesting in a very pleasant way to think about how far you could go to delight your users.ExperienceI was trying to think of a phrase to convey how extreme your attention to users should be, and I realized Steve Jobs had already done it: insanely great. Steve wasn\u0026rsquo;t just using \u0026ldquo;insanely\u0026rdquo; as a synonym for \u0026ldquo;very.\u0026rdquo; He meant it more literally — that one should focus on quality of execution to a degree that in everyday life would be considered pathological.All the most successful startups we\u0026rsquo;ve funded have, and that probably doesn\u0026rsquo;t surprise would-be founders. What novice founders don\u0026rsquo;t get is what insanely great translates to in a larval startup. When Steve Jobs started using that phrase, Apple was already an established company. He meant the Mac (and its documentation and even packaging — such is the nature of obsession) should be insanely well designed and manufactured. That\u0026rsquo;s not hard for engineers to grasp. It\u0026rsquo;s just a more extreme version of designing a robust and elegant product.What founders have a hard time grasping (and Steve himself might have had a hard time grasping) is what insanely great morphs into as you roll the time slider back to the first couple months of a startup\u0026rsquo;s life. It\u0026rsquo;s not the product that should be insanely great, but the experience of being your user. The product is just one component of that. For a big company it\u0026rsquo;s necessarily the dominant one. But you can and should give users an insanely great experience with an early, incomplete, buggy product, if you make up the difference with attentiveness.Can, perhaps, but should? Yes. Over-engaging with early users is not just a permissible technique for getting growth rolling. For most successful startups it\u0026rsquo;s a necessary part of the feedback loop that makes the product good. Making a better mousetrap is not an atomic operation. Even if you start the way most successful startups have, by building something you yourself need, the first thing you build is never quite right. And except in domains with big penalties for making mistakes, it\u0026rsquo;s often better not to aim for perfection initially. In software, especially, it usually works best to get something in front of users as soon as it has a quantum of utility, and then see what they do with it. Perfectionism is often an excuse for procrastination, and in any case your initial model of users is always inaccurate, even if you\u0026rsquo;re one of them. [7]The feedback you get from engaging directly with your earliest users will be the best you ever get. When you\u0026rsquo;re so big you have to resort to focus groups, you\u0026rsquo;ll wish you could go over to your users\u0026rsquo; homes and offices and watch them use your stuff like you did when there were only a handful of them.FireSometimes the right unscalable trick is to focus on a deliberately narrow market. It\u0026rsquo;s like keeping a fire contained at first to get it really hot before adding more logs.That\u0026rsquo;s what Facebook did. At first it was just for Harvard students. In that form it only had a potential market of a few thousand people, but because they felt it was really for them, a critical mass of them signed up. After Facebook stopped being for Harvard students, it remained for students at specific colleges for quite a while. When I interviewed Mark Zuckerberg at Startup School, he said that while it was a lot of work creating course lists for each school, doing that made students feel the site was their natural home.Any startup that could be described as a marketplace usually has to start in a subset of the market, but this can work for other startups as well. It\u0026rsquo;s always worth asking if there\u0026rsquo;s a subset of the market in which you can get a critical mass of users quickly. [8]Most startups that use the contained fire strategy do it unconsciously. They build something for themselves and their friends, who happen to be the early adopters, and only realize later that they could offer it to a broader market. The strategy works just as well if you do it unconsciously. The biggest danger of not being consciously aware of this pattern is for those who naively discard part of it. E.g. if you don\u0026rsquo;t build something for yourself and your friends, or even if you do, but you come from the corporate world and your friends are not early adopters, you\u0026rsquo;ll no longer have a perfect initial market handed to you on a platter.Among companies, the best early adopters are usually other startups. They\u0026rsquo;re more open to new things both by nature and because, having just been started, they haven\u0026rsquo;t made all their choices yet. Plus when they succeed they grow fast, and you with them. It was one of many unforeseen advantages of the YC model (and specifically of making YC big) that B2B startups now have an instant market of hundreds of other startups ready at hand.MerakiFor hardware startups there\u0026rsquo;s a variant of doing things that don\u0026rsquo;t scale that we call \u0026ldquo;pulling a Meraki.\u0026rdquo; Although we didn\u0026rsquo;t fund Meraki, the founders were Robert Morris\u0026rsquo;s grad students, so we know their history. They got started by doing something that really doesn\u0026rsquo;t scale: assembling their routers themselves.Hardware startups face an obstacle that software startups don\u0026rsquo;t. The minimum order for a factory production run is usually several hundred thousand dollars. Which can put you in a catch-22: without a product you can\u0026rsquo;t generate the growth you need to raise the money to manufacture your product. Back when hardware startups had to rely on investors for money, you had to be pretty convincing to overcome this. The arrival of crowdfunding (or more precisely, preorders) has helped a lot. But even so I\u0026rsquo;d advise startups to pull a Meraki initially if they can. That\u0026rsquo;s what Pebble did. The Pebbles assembled the first several hundred watches themselves. If they hadn\u0026rsquo;t gone through that phase, they probably wouldn\u0026rsquo;t have sold $10 million worth of watches when they did go on Kickstarter.Like paying excessive attention to early customers, fabricating things yourself turns out to be valuable for hardware startups. You can tweak the design faster when you\u0026rsquo;re the factory, and you learn things you\u0026rsquo;d never have known otherwise. Eric Migicovsky of Pebble said one of things he learned was \u0026ldquo;how valuable it was to source good screws.\u0026rdquo; Who knew?ConsultSometimes we advise founders of B2B startups to take over-engagement to an extreme, and to pick a single user and act as if they were consultants building something just for that one user. The initial user serves as the form for your mold; keep tweaking till you fit their needs perfectly, and you\u0026rsquo;ll usually find you\u0026rsquo;ve made something other users want too. Even if there aren\u0026rsquo;t many of them, there are probably adjacent territories that have more. As long as you can find just one user who really needs something and can act on that need, you\u0026rsquo;ve got a toehold in making something people want, and that\u0026rsquo;s as much as any startup needs initially. [9]Consulting is the canonical example of work that doesn\u0026rsquo;t scale. But (like other ways of bestowing one\u0026rsquo;s favors liberally) it\u0026rsquo;s safe to do it so long as you\u0026rsquo;re not being paid to. That\u0026rsquo;s where companies cross the line. So long as you\u0026rsquo;re a product company that\u0026rsquo;s merely being extra attentive to a customer, they\u0026rsquo;re very grateful even if you don\u0026rsquo;t solve all their problems. But when they start paying you specifically for that attentiveness — when they start paying you by the hour — they expect you to do everything.Another consulting-like technique for recruiting initially lukewarm users is to use your software yourselves on their behalf. We did that at Viaweb. When we approached merchants asking if they wanted to use our software to make online stores, some said no, but they\u0026rsquo;d let us make one for them. Since we would do anything to get users, we did. We felt pretty lame at the time. Instead of organizing big strategic e-commerce partnerships, we were trying to sell luggage and pens and men\u0026rsquo;s shirts. But in retrospect it was exactly the right thing to do, because it taught us how it would feel to merchants to use our software. Sometimes the feedback loop was near instantaneous: in the middle of building some merchant\u0026rsquo;s site I\u0026rsquo;d find I needed a feature we didn\u0026rsquo;t have, so I\u0026rsquo;d spend a couple hours implementing it and then resume building the site.ManualThere\u0026rsquo;s a more extreme variant where you don\u0026rsquo;t just use your software, but are your software. When you only have a small number of users, you can sometimes get away with doing by hand things that you plan to automate later. This lets you launch faster, and when you do finally automate yourself out of the loop, you\u0026rsquo;ll know exactly what to build because you\u0026rsquo;ll have muscle memory from doing it yourself.When manual components look to the user like software, this technique starts to have aspects of a practical joke. For example, the way Stripe delivered \u0026ldquo;instant\u0026rdquo; merchant accounts to its first users was that the founders manually signed them up for traditional merchant accounts behind the scenes.Some startups could be entirely manual at first. If you can find someone with a problem that needs solving and you can solve it manually, go ahead and do that for as long as you can, and then gradually automate the bottlenecks. It would be a little frightening to be solving users\u0026rsquo; problems in a way that wasn\u0026rsquo;t yet automatic, but less frightening than the far more common case of having something automatic that doesn\u0026rsquo;t yet solve anyone\u0026rsquo;s problems.BigI should mention one sort of initial tactic that usually doesn\u0026rsquo;t work: the Big Launch. I occasionally meet founders who seem to believe startups are projectiles rather than powered aircraft, and that they\u0026rsquo;ll make it big if and only if they\u0026rsquo;re launched with sufficient initial velocity. They want to launch simultaneously in 8 different publications, with embargoes. And on a tuesday, of course, since they read somewhere that\u0026rsquo;s the optimum day to launch something.It\u0026rsquo;s easy to see how little launches matter. Think of some successful startups. How many of their launches do you remember? All you need from a launch is some initial core of users. How well you\u0026rsquo;re doing a few months later will depend more on how happy you made those users than how many there were of them. [10]So why do founders think launches matter? A combination of solipsism and laziness. They think what they\u0026rsquo;re building is so great that everyone who hears about it will immediately sign up. Plus it would be so much less work if you could get users merely by broadcasting your existence, rather than recruiting them one at a time. But even if what you\u0026rsquo;re building really is great, getting users will always be a gradual process — partly because great things are usually also novel, but mainly because users have other things to think about.Partnerships too usually don\u0026rsquo;t work. They don\u0026rsquo;t work for startups in general, but they especially don\u0026rsquo;t work as a way to get growth started. It\u0026rsquo;s a common mistake among inexperienced founders to believe that a partnership with a big company will be their big break. Six months later they\u0026rsquo;re all saying the same thing: that was way more work than we expected, and we ended up getting practically nothing out of it. [11]It\u0026rsquo;s not enough just to do something extraordinary initially. You have to make an extraordinary effort initially. Any strategy that omits the effort — whether it\u0026rsquo;s expecting a big launch to get you users, or a big partner — is ipso facto suspect.VectorThe need to do something unscalably laborious to get started is so nearly universal that it might be a good idea to stop thinking of startup ideas as scalars. Instead we should try thinking of them as pairs of what you\u0026rsquo;re going to build, plus the unscalable thing(s) you\u0026rsquo;re going to do initially to get the company going.It could be interesting to start viewing startup ideas this way, because now that there are two components you can try to be imaginative about the second as well as the first. But in most cases the second component will be what it usually is — recruit users manually and give them an overwhelmingly good experience — and the main benefit of treating startups as vectors will be to remind founders they need to work hard in two dimensions. [12]In the best case, both components of the vector contribute to your company\u0026rsquo;s DNA: the unscalable things you have to do to get started are not merely a necessary evil, but change the company permanently for the better. If you have to be aggressive about user acquisition when you\u0026rsquo;re small, you\u0026rsquo;ll probably still be aggressive when you\u0026rsquo;re big. If you have to manufacture your own hardware, or use your software on users\u0026rsquo;s behalf, you\u0026rsquo;ll learn things you couldn\u0026rsquo;t have learned otherwise. And most importantly, if you have to work hard to delight users when you only have a handful of them, you\u0026rsquo;ll keep doing it when you have a lot.Notes[1] Actually Emerson never mentioned mousetraps specifically. He wrote \u0026ldquo;If a man has good corn or wood, or boards, or pigs, to sell, or can make better chairs or knives, crucibles or church organs, than anybody else, you will find a broad hard-beaten road to his house, though it be in the woods.\u0026quot;[2] Thanks to Sam Altman for suggesting I make this explicit. And no, you can\u0026rsquo;t avoid doing sales by hiring someone to do it for you. You have to do sales yourself initially. Later you can hire a real salesperson to replace you.[3] The reason this works is that as you get bigger, your size helps you grow. Patrick Collison wrote \u0026ldquo;At some point, there was a very noticeable change in how Stripe felt. It tipped from being this boulder we had to push to being a train car that in fact had its own momentum.\u0026quot;[4] One of the more subtle ways in which YC can help founders is by calibrating their ambitions, because we know exactly how a lot of successful startups looked when they were just getting started.[5] If you\u0026rsquo;re building something for which you can\u0026rsquo;t easily get a small set of users to observe — e.g. enterprise software — and in a domain where you have no connections, you\u0026rsquo;ll have to rely on cold calls and introductions. But should you even be working on such an idea?[6] Garry Tan pointed out an interesting trap founders fall into in the beginning. They want so much to seem big that they imitate even the flaws of big companies, like indifference to individual users. This seems to them more \u0026ldquo;professional.\u0026rdquo; Actually it\u0026rsquo;s better to embrace the fact that you\u0026rsquo;re small and use whatever advantages that brings.[7] Your user model almost couldn\u0026rsquo;t be perfectly accurate, because users\u0026rsquo; needs often change in response to what you build for them. Build them a microcomputer, and suddenly they need to run spreadsheets on it, because the arrival of your new microcomputer causes someone to invent the spreadsheet.[8] If you have to choose between the subset that will sign up quickest and those that will pay the most, it\u0026rsquo;s usually best to pick the former, because those are probably the early adopters. They\u0026rsquo;ll have a better influence on your product, and they won\u0026rsquo;t make you expend as much effort on sales. And though they have less money, you don\u0026rsquo;t need that much to maintain your target growth rate early on.[9] Yes, I can imagine cases where you could end up making something that was really only useful for one user. But those are usually obvious, even to inexperienced founders. So if it\u0026rsquo;s not obvious you\u0026rsquo;d be making something for a market of one, don\u0026rsquo;t worry about that danger.[10] There may even be an inverse correlation between launch magnitude and success. The only launches I remember are famous flops like the Segway and Google Wave. Wave is a particularly alarming example, because I think it was actually a great idea that was killed partly by its overdone launch.[11] Google grew big on the back of Yahoo, but that wasn\u0026rsquo;t a partnership. Yahoo was their customer.[12] It will also remind founders that an idea where the second component is empty — an idea where there is nothing you can do to get going, e.g. because you have no way to find users to recruit manually — is probably a bad idea, at least for those founders.Thanks to Sam Altman, Paul Buchheit, Patrick Collison, Kevin Hale, Steven Levy, Jessica Livingston, Geoff Ralston, and Garry Tan for reading drafts of this.: Want to start a startup? Get funded by Y Combinator.\n","date":"1 January 0001","permalink":"/posts/do-things-that-dont-scale-9179e636a0bc4e49b88556b95add3b6d/untitled-database-ff2e5d8904c448018e4120037961573c/want-to-start-a-startup-get-funded-by-y-combinator-f57a6890acae4e248da2cfd1fa0f4aba/","section":"Posts","summary":"Want to start a startup? Get funded by Y Combinator. One of the most common types of advice we give at Y Combinator is to do things that don\u0026rsquo;t scale.","title":""},{"content":"@@ -1,3 +1,88 @@ # ","date":"1 January 0001","permalink":"/posts/dockerize-the-jaffle-shop-by-davehowell-pull-req-0a8015bec62d4947af5b0dd0e5207468/untitled-database-5a2f1bcbea3c4fc58f5521360ba1845d/@@-13-+188-@@-4406ef2372da43e5913758b02dc30d0b/","section":"Posts","summary":"@@ -1,3 +1,88 @@ # ","title":""},{"content":"current_time = datetime.fromtimestamp(time.time()).strftime(\u0026rsquo;%Y%m%d%H%M%S') # ","date":"1 January 0001","permalink":"/posts/example-dags-salesforce_data_processing-py-at-mast-85898bfb0f2c4b3ea1219279aa71a43b/untitled-database-684fc9379e7948aba203dd2f5bcfe5b6/current_time-datetime-fromtimestamptime-time-36834b0893b04c43834985def8bb1a0a/","section":"Posts","summary":"current_time = datetime.fromtimestamp(time.time()).strftime(\u0026rsquo;%Y%m%d%H%M%S') # ","title":""},{"content":"current_time = datetime.fromtimestamp(time.time()).strftime(\u0026rsquo;%Y%m%d%H%M%S') # ","date":"1 January 0001","permalink":"/posts/example-dags-salesforce_data_processing-py-at-mast-85898bfb0f2c4b3ea1219279aa71a43b/untitled-database-684fc9379e7948aba203dd2f5bcfe5b6/current_time-datetime-fromtimestamptime-time-b9ee0494cfbd4b4c97cf4ca3105063f9/","section":"Posts","summary":"current_time = datetime.fromtimestamp(time.time()).strftime(\u0026rsquo;%Y%m%d%H%M%S') # ","title":""},{"content":"final_output = expected_revenue.set_index(\u0026rsquo;lead_source\u0026rsquo;)\\ # ","date":"1 January 0001","permalink":"/posts/example-dags-salesforce_data_processing-py-at-mast-85898bfb0f2c4b3ea1219279aa71a43b/untitled-database-684fc9379e7948aba203dd2f5bcfe5b6/final_output-expected_revenue-set_indexlead_so-3b8cc376388e4582abd3514ec3ec73e4/","section":"Posts","summary":"final_output = expected_revenue.set_index(\u0026rsquo;lead_source\u0026rsquo;)\\ # ","title":""},{"content":"final_output = expected_revenue.set_index(\u0026rsquo;name\u0026rsquo;)\\ # ","date":"1 January 0001","permalink":"/posts/example-dags-salesforce_data_processing-py-at-mast-85898bfb0f2c4b3ea1219279aa71a43b/untitled-database-684fc9379e7948aba203dd2f5bcfe5b6/final_output-expected_revenue-set_indexname-7bce40c5beef4d82958c7d442e323df3/","section":"Posts","summary":"final_output = expected_revenue.set_index(\u0026rsquo;name\u0026rsquo;)\\ # ","title":""},{"content":"mql = pg_hook.get_pandas_df(mql_query) # ","date":"1 January 0001","permalink":"/posts/example-dags-salesforce_data_processing-py-at-mast-85898bfb0f2c4b3ea1219279aa71a43b/untitled-database-684fc9379e7948aba203dd2f5bcfe5b6/mql-pg_hook-get_pandas_dfmql_query-b6da29841bd340668e21236579d9f678/","section":"Posts","summary":"mql = pg_hook.get_pandas_df(mql_query) # ","title":""},{"content":"new_opps = pg_hook.get_pandas_df(new_opp_query) # ","date":"1 January 0001","permalink":"/posts/example-dags-salesforce_data_processing-py-at-mast-85898bfb0f2c4b3ea1219279aa71a43b/untitled-database-684fc9379e7948aba203dd2f5bcfe5b6/new_opps-pg_hook-get_pandas_dfnew_opp_query-a0bacd37fcda4a55b7cab2a499c8146e/","section":"Posts","summary":"new_opps = pg_hook.get_pandas_df(new_opp_query) # ","title":""},{"content":"new_results.append(\u0026quot;{0}: {1}\u0026quot;.format(i[0],i[1])) # ","date":"1 January 0001","permalink":"/posts/example-dags-salesforce_data_processing-py-at-mast-85898bfb0f2c4b3ea1219279aa71a43b/untitled-database-684fc9379e7948aba203dd2f5bcfe5b6/new_results-append-_0_-1-formati0i1-842151ee1cf34af5aafa62e2801726c7/","section":"Posts","summary":"new_results.append(\u0026quot;{0}: {1}\u0026quot;.format(i[0],i[1])) # ","title":""},{"content":"path = \u0026lsquo;https://s3.amazonaws.com/example-bucket/{0}'.format(s3key) # ","date":"1 January 0001","permalink":"/posts/example-dags-salesforce_data_processing-py-at-mast-85898bfb0f2c4b3ea1219279aa71a43b/untitled-database-684fc9379e7948aba203dd2f5bcfe5b6/path-https-s3-amazonaws-com-example-bucket-0-462a95ef1b1d468a8c6a8aa8e464aece/","section":"Posts","summary":"path = \u0026lsquo;https://s3.amazonaws.com/example-bucket/{0}'.format(s3key) # ","title":""},{"content":"path = \u0026lsquo;https://s3.amazonaws.com/example-bucket/{0}'.format(s3key) # ","date":"1 January 0001","permalink":"/posts/example-dags-salesforce_data_processing-py-at-mast-85898bfb0f2c4b3ea1219279aa71a43b/untitled-database-684fc9379e7948aba203dd2f5bcfe5b6/path-https-s3-amazonaws-com-example-bucket-0-fad45e48020e445d934c546fdf105334/","section":"Posts","summary":"path = \u0026lsquo;https://s3.amazonaws.com/example-bucket/{0}'.format(s3key) # ","title":""},{"content":"return \u0026ldquo;aws_access_key_id={};aws_secret_access_key={}\u0026quot;.format(key_id,secret) # ","date":"1 January 0001","permalink":"/posts/example-dags-salesforce_data_processing-py-at-mast-85898bfb0f2c4b3ea1219279aa71a43b/untitled-database-684fc9379e7948aba203dd2f5bcfe5b6/return-aws_access_key_idaws_secret_access_key-15b6cc9a9f224c57bf46a0cc3360584a/","section":"Posts","summary":"return \u0026ldquo;aws_access_key_id={};aws_secret_access_key={}\u0026quot;.format(key_id,secret) # ","title":""},{"content":"s3key = \u0026ldquo;salesforce-files/{0}.png\u0026rdquo;.format(current_time) # ","date":"1 January 0001","permalink":"/posts/example-dags-salesforce_data_processing-py-at-mast-85898bfb0f2c4b3ea1219279aa71a43b/untitled-database-684fc9379e7948aba203dd2f5bcfe5b6/s3key-salesforce-files-0-png-formatcurrent_ti-d68dd779c62346cf833f488c96b9d3cc/","section":"Posts","summary":"s3key = \u0026ldquo;salesforce-files/{0}.png\u0026rdquo;.format(current_time) # ","title":""},{"content":"s3key = \u0026ldquo;salesforce-files/{0}.png\u0026rdquo;.format(current_time) # ","date":"1 January 0001","permalink":"/posts/example-dags-salesforce_data_processing-py-at-mast-85898bfb0f2c4b3ea1219279aa71a43b/untitled-database-684fc9379e7948aba203dd2f5bcfe5b6/s3key-salesforce-files-0-png-formatcurrent_ti-f280897149c8463dacada5934f2e289e/","section":"Posts","summary":"s3key = \u0026ldquo;salesforce-files/{0}.png\u0026rdquo;.format(current_time) # ","title":""},{"content":"secret = s3_conn.extra_dejson.get(\u0026lsquo;aws_secret_access_key\u0026rsquo;) # ","date":"1 January 0001","permalink":"/posts/example-dags-salesforce_data_processing-py-at-mast-85898bfb0f2c4b3ea1219279aa71a43b/untitled-database-684fc9379e7948aba203dd2f5bcfe5b6/secret-s3_conn-extra_dejson-getaws_secret_acce-8af0658f758740ddb1de0f4bc6d008c3/","section":"Posts","summary":"secret = s3_conn.extra_dejson.get(\u0026lsquo;aws_secret_access_key\u0026rsquo;) # ","title":""},{"content":"API Configurable # ","date":"1 January 0001","permalink":"/posts/extract-hubspot-data-for-analytics-fivetran-implem-dc96b0ca057e4fd2aba3148d47038dc7/untitled-database-7be40f436c274368ad68374244c8515b/api-configurable-1f2773f0ae984ebeb2f564fd9f8e2209/","section":"Posts","summary":"API Configurable # ","title":""},{"content":"Capture Deletes # ","date":"1 January 0001","permalink":"/posts/extract-hubspot-data-for-analytics-fivetran-implem-dc96b0ca057e4fd2aba3148d47038dc7/untitled-database-7be40f436c274368ad68374244c8515b/capture-deletes-1a35e5c5dd4041e6a9496042c6f8c0e7/","section":"Posts","summary":"Capture Deletes # ","title":""},{"content":"Change‑Data Capture # ","date":"1 January 0001","permalink":"/posts/extract-hubspot-data-for-analytics-fivetran-implem-dc96b0ca057e4fd2aba3148d47038dc7/untitled-database-7be40f436c274368ad68374244c8515b/changedata-capture-414dddc406164cd8a906e902ed72d00d/","section":"Posts","summary":"Change‑Data Capture # ","title":""},{"content":"Column Hashing # ","date":"1 January 0001","permalink":"/posts/extract-hubspot-data-for-analytics-fivetran-implem-dc96b0ca057e4fd2aba3148d47038dc7/untitled-database-7be40f436c274368ad68374244c8515b/column-hashing-47552cd32c2d403ab2bcb96bb3e9b40e/","section":"Posts","summary":"Column Hashing # ","title":""},{"content":"Priority-first sync # ","date":"1 January 0001","permalink":"/posts/extract-hubspot-data-for-analytics-fivetran-implem-dc96b0ca057e4fd2aba3148d47038dc7/untitled-database-7be40f436c274368ad68374244c8515b/priority-first-sync-45fe5c90e6034bb09c11e088d4d8653f/","section":"Posts","summary":"Priority-first sync # ","title":""},{"content":"Encryption # Dependency: cryptography\n","date":"1 January 0001","permalink":"/posts/github-jarun-buku-browser-independent-bookmark-m-a141975bbaca41e38da331e040915b9a/untitled-database-e2406614eb8340088054577a372676c5/encryption-1ae00dab774e4921b1e1dee6728d23fb/","section":"Posts","summary":"Encryption # Dependency: cryptography","title":""},{"content":"HTML # Dependency: beautifulsoup4, html5lib\n","date":"1 January 0001","permalink":"/posts/github-jarun-buku-browser-independent-bookmark-m-a141975bbaca41e38da331e040915b9a/untitled-database-e2406614eb8340088054577a372676c5/html-ae98150b499c467fbe4f53032f8032ca/","section":"Posts","summary":"HTML # Dependency: beautifulsoup4, html5lib","title":""},{"content":"HTTPS # Dependency: certifi, urllib3\n","date":"1 January 0001","permalink":"/posts/github-jarun-buku-browser-independent-bookmark-m-a141975bbaca41e38da331e040915b9a/untitled-database-e2406614eb8340088054577a372676c5/https-73045786b8d74c5fa351e742427225f6/","section":"Posts","summary":"HTTPS # Dependency: certifi, urllib3","title":""},{"content":"Scripting language # Dependency: Python 3.5+\n","date":"1 January 0001","permalink":"/posts/github-jarun-buku-browser-independent-bookmark-m-a141975bbaca41e38da331e040915b9a/untitled-database-e2406614eb8340088054577a372676c5/scripting-language-d7c93dc19bd0481da72f229827e48910/","section":"Posts","summary":"Scripting language # Dependency: Python 3.5+","title":""},{"content":"bing # $0.41: 0 $19.11: 6.43 $34.33: 0 $47.00: 0 1.37: 0.48 2020-02-01: February 1, 2020\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-0befe6274ee2481a823bf580fe2d606b/bing-934ae517c40246cd9da2a0881d9e67db/","section":"Posts","summary":"bing # $0.41: 0 $19.11: 6.43 $34.33: 0 $47.00: 0 1.37: 0.48 2020-02-01: February 1, 2020","title":""},{"content":"direct # $0.41: 0 $19.11: 141.43 $34.33: 0 $47.00: 0 1.37: 10.98 2020-02-01: February 1, 2020\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-0befe6274ee2481a823bf580fe2d606b/direct-0b9f9f1cf3f0476bb51363161f5a6e1e/","section":"Posts","summary":"direct # $0.41: 0 $19.11: 141.43 $34.33: 0 $47.00: 0 1.37: 10.98 2020-02-01: February 1, 2020","title":""},{"content":"facebook_ads # $0.41: 0.21 $19.11: 66.43 $34.33: 60.67 $47.00: 312 1.37: 5.14 2020-02-01: February 1, 2020\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-0befe6274ee2481a823bf580fe2d606b/facebook_ads-569d46f41d6f4e639893845afa670db4/","section":"Posts","summary":"facebook_ads # $0.41: 0.21 $19.11: 66.43 $34.33: 60.67 $47.00: 312 1.37: 5.14 2020-02-01: February 1, 2020","title":""},{"content":"google # $0.41: 0 $19.11: 41.61 $34.33: 0 $47.00: 0 1.37: 3.04 2020-02-01: February 1, 2020\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-0befe6274ee2481a823bf580fe2d606b/google-73593559be80487580e2596613c94b3d/","section":"Posts","summary":"google # $0.41: 0 $19.11: 41.61 $34.33: 0 $47.00: 0 1.37: 3.04 2020-02-01: February 1, 2020","title":""},{"content":"Untitled # 10percentpromocode: 10percentpromocode 13: 13 2020-02-01: February 6, 2020 facebook_ads: facebook_ads paid_social: paid_social\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-2a3a2b1b5d2549579337d8406e27ad53/untitled-68e5250cfa07471c97163cfb4e66b09a/","section":"Posts","summary":"Untitled # 10percentpromocode: 10percentpromocode 13: 13 2020-02-01: February 6, 2020 facebook_ads: facebook_ads paid_social: paid_social","title":""},{"content":"Untitled # 10percentpromocode: 10percentpromocode 13: 11 2020-02-01: February 8, 2020 facebook_ads: facebook_ads paid_social: paid_social\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-2a3a2b1b5d2549579337d8406e27ad53/untitled-a26ddc8d4f564d85a08b0bff281a3113/","section":"Posts","summary":"Untitled # 10percentpromocode: 10percentpromocode 13: 11 2020-02-01: February 8, 2020 facebook_ads: facebook_ads paid_social: paid_social","title":""},{"content":"Untitled # 10percentpromocode: 10percentpromocode 13: 13 2020-02-01: February 3, 2020 facebook_ads: facebook_ads paid_social: paid_social\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-2a3a2b1b5d2549579337d8406e27ad53/untitled-a4f9b29a16514bff9c93893916199125/","section":"Posts","summary":"Untitled # 10percentpromocode: 10percentpromocode 13: 13 2020-02-01: February 3, 2020 facebook_ads: facebook_ads paid_social: paid_social","title":""},{"content":"Untitled # 10percentpromocode: 10percentpromocode 13: 13 2020-02-01: February 5, 2020 facebook_ads: facebook_ads paid_social: paid_social\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-2a3a2b1b5d2549579337d8406e27ad53/untitled-b12d7b5c2ef74c5e8564231a1ec0ea91/","section":"Posts","summary":"Untitled # 10percentpromocode: 10percentpromocode 13: 13 2020-02-01: February 5, 2020 facebook_ads: facebook_ads paid_social: paid_social","title":""},{"content":"Untitled # 10percentpromocode: 10percentpromocode 13: 15 2020-02-01: February 2, 2020 facebook_ads: facebook_ads paid_social: paid_social\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-2a3a2b1b5d2549579337d8406e27ad53/untitled-dbfc4c6166ab4d73a26b7d88f4b743eb/","section":"Posts","summary":"Untitled # 10percentpromocode: 10percentpromocode 13: 15 2020-02-01: February 2, 2020 facebook_ads: facebook_ads paid_social: paid_social","title":""},{"content":"Untitled # 10percentpromocode: 10percentpromocode 13: 10 2020-02-01: February 4, 2020 facebook_ads: facebook_ads paid_social: paid_social\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-2a3a2b1b5d2549579337d8406e27ad53/untitled-eb60be893a714ea0a3535dae6df504ed/","section":"Posts","summary":"Untitled # 10percentpromocode: 10percentpromocode 13: 10 2020-02-01: February 4, 2020 facebook_ads: facebook_ads paid_social: paid_social","title":""},{"content":"Untitled # 10percentpromocode: 10percentpromocode 13: 12 2020-02-01: February 7, 2020 facebook_ads: facebook_ads paid_social: paid_social\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-2a3a2b1b5d2549579337d8406e27ad53/untitled-f1dbc9ee1e5e48238943bcae906d2783/","section":"Posts","summary":"Untitled # 10percentpromocode: 10percentpromocode 13: 12 2020-02-01: February 7, 2020 facebook_ads: facebook_ads paid_social: paid_social","title":""},{"content":"adwords # 0: 0 0.25: 0.25 0.4: 0.1 1: 0 2020-02-03 12:29:32: February 3, 2020 6:50 PM (GMT) 2020-02-04 10:05:31: February 4, 2020 10:05 AM (GMT) 4: 16 745: 745 paid_social: paid_search\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-bc2a77ef086a4742b0c27b59da8e82b1/adwords-b59f9f4654b6438ab1a5426dde463ca0/","section":"Posts","summary":"adwords # 0: 0 0.25: 0.25 0.4: 0.1 1: 0 2020-02-03 12:29:32: February 3, 2020 6:50 PM (GMT) 2020-02-04 10:05:31: February 4, 2020 10:05 AM (GMT) 4: 16 745: 745 paid_social: paid_search","title":""},{"content":"bing # 0: 0.4 0.25: 0 0.4: 0.33 1: 1 10percentpromocode: February 10, 2020 1:54 AM (GMT) 2020-02-03 12:29:32: February 10, 2020 1:53 AM (GMT) 2020-02-04 10:05:31: April 25, 2020 12:00 AM (GMT) 4: 69 745: 2956 paid_social: search\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-bc2a77ef086a4742b0c27b59da8e82b1/bing-7ef5b61758b748e8a25576864a35b20b/","section":"Posts","summary":"bing # 0: 0.4 0.25: 0 0.4: 0.33 1: 1 10percentpromocode: February 10, 2020 1:54 AM (GMT) 2020-02-03 12:29:32: February 10, 2020 1:53 AM (GMT) 2020-02-04 10:05:31: April 25, 2020 12:00 AM (GMT) 4: 69 745: 2956 paid_social: search","title":""},{"content":"direct # 0: 0.25 0.25: 0 0.4: 0 1: 0.4 10percentpromocode: April 25, 2020 12:00 AM (GMT) 2020-02-03 12:29:32: February 4, 2020 10:05 AM (GMT) 2020-02-04 10:05:31: April 25, 2020 1:00 AM (GMT) 4: 32 745: 745 paid_social: 2020-02-04 10:05:31\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-bc2a77ef086a4742b0c27b59da8e82b1/direct-0f5b02aabdb5426e9411e899ca6bf952/","section":"Posts","summary":"direct # 0: 0.25 0.25: 0 0.4: 0 1: 0.4 10percentpromocode: April 25, 2020 12:00 AM (GMT) 2020-02-03 12:29:32: February 4, 2020 10:05 AM (GMT) 2020-02-04 10:05:31: April 25, 2020 1:00 AM (GMT) 4: 32 745: 745 paid_social: 2020-02-04 10:05:31","title":""},{"content":"direct # 0: 0.25 0.25: 0 0.4: 0 1: 0.1 10percentpromocode: April 25, 2020 12:00 AM (GMT) 2020-02-03 12:29:32: February 4, 2020 4:50 AM (GMT) 2020-02-04 10:05:31: April 25, 2020 12:00 AM (GMT) 4: 23 745: 745 paid_social: 2020-02-04 10:05:31\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-bc2a77ef086a4742b0c27b59da8e82b1/direct-a089aab556e845ca9fb946b2a54d9935/","section":"Posts","summary":"direct # 0: 0.25 0.25: 0 0.4: 0 1: 0.1 10percentpromocode: April 25, 2020 12:00 AM (GMT) 2020-02-03 12:29:32: February 4, 2020 4:50 AM (GMT) 2020-02-04 10:05:31: April 25, 2020 12:00 AM (GMT) 4: 23 745: 745 paid_social: 2020-02-04 10:05:31","title":""},{"content":"facebook_ads # 0: 0 0.25: 0.33 0.4: 0.4 1: 1 2020-02-03 12:29:32: February 1, 2020 12:55 PM (GMT) 2020-02-04 10:05:31: February 10, 2020 1:54 AM (GMT) 4: 1 745: 2956 paid_social: paid_social\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-bc2a77ef086a4742b0c27b59da8e82b1/facebook_ads-5a464b4c32a34043a13dabb336809891/","section":"Posts","summary":"facebook_ads # 0: 0 0.25: 0.33 0.4: 0.4 1: 1 2020-02-03 12:29:32: February 1, 2020 12:55 PM (GMT) 2020-02-04 10:05:31: February 10, 2020 1:54 AM (GMT) 4: 1 745: 2956 paid_social: paid_social","title":""},{"content":"facebook_ads # 0: 0 0.25: 0.33 0.4: 0.2 1: 0 2020-02-03 12:29:32: February 10, 2020 12:51 AM (GMT) 2020-02-04 10:05:31: February 10, 2020 1:54 AM (GMT) 4: 68 745: 2956 paid_social: paid_social\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-bc2a77ef086a4742b0c27b59da8e82b1/facebook_ads-adec70678f5f4f3a8b888326c1507a47/","section":"Posts","summary":"facebook_ads # 0: 0 0.25: 0.33 0.4: 0.2 1: 0 2020-02-03 12:29:32: February 10, 2020 12:51 AM (GMT) 2020-02-04 10:05:31: February 10, 2020 1:54 AM (GMT) 4: 68 745: 2956 paid_social: paid_social","title":""},{"content":"10percentpromocode # 1: 3 2020-02-01 12:55:16: February 3, 2020 12:15 PM (GMT) 2020-02-01 12:55:47: February 3, 2020 12:15 PM (GMT) 2956: 1170 facebook_ads: facebook_ads paid_social: paid_social\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-cf1e3412d1ff4f408b9044fc87ec8981/10percentpromocode-0dad8e65175a4dbeaa17e9a733885d22/","section":"Posts","summary":"10percentpromocode # 1: 3 2020-02-01 12:55:16: February 3, 2020 12:15 PM (GMT) 2020-02-01 12:55:47: February 3, 2020 12:15 PM (GMT) 2956: 1170 facebook_ads: facebook_ads paid_social: paid_social","title":""},{"content":"freeshipping # 1: 2 2020-02-01 12:55:16: February 2, 2020 1:06 PM (GMT) 2020-02-01 12:55:47: February 2, 2020 1:18 PM (GMT) 2956: 4 facebook_ads: facebook_ads paid_social: paid_social\n","date":"1 January 0001","permalink":"/posts/how-to-analyze-marketing-attribution-adc986de2cd54c0aaf5fdaea0bc2a97f/untitled-database-cf1e3412d1ff4f408b9044fc87ec8981/freeshipping-8fb1dab9a11743fd99432e623e4b9ff5/","section":"Posts","summary":"freeshipping # 1: 2 2020-02-01 12:55:16: February 2, 2020 1:06 PM (GMT) 2020-02-01 12:55:47: February 2, 2020 1:18 PM (GMT) 2956: 4 facebook_ads: facebook_ads paid_social: paid_social","title":""},{"content":"Where will you find our influence? A browser search of www.healthyheating.com will show us to be referenced in technical papers, Masters and Ph.D. Level Theses and course curriculums; and you\u0026rsquo;ll find Robert Bean, R.E.T., P.L.(Eng.) working on committees developing code, standards and guidelines; and you will find us in interviews and numerous publications and websites. Here\u0026rsquo;s what people are saying\u0026hellip; Who we are not. www.healthyheating.com is not a manufacturer nor wholesaler; it does not do pro-bono engineering services, buy, sell or distribute equipment nor does it do mechanical contracting. It is also not an industry association funded by membership nor is it funded by government grants. How are we funded? We offer select web pages for sponsorship, use donations and revenue from our education programs, Google AdSense and fee based services to support the operating costs of the site. Contact us for details if you wish to help out by sponsoring one or more pages with your logo placement, submitting content, sponsoring seminars and webinars, making a financial donation or using our fee based services. See our website statistics for the 2012 period. Our audience: We serve the general public, practitioners, students and professionals from the health and building sciences. Our Sole Purpose: To offer a research based site for self-study on topics bridging the health and building sciences; and to promote the benefits of radiant based HVAC systems with dedicated outdoor air systems as energy efficient solutions to indoor environmental quality challenges. Our Number One Positioning Statement\u0026hellip; Buildings occupied by those approaching or already enjoying retirement should be designed as self contained residential healthcare centers starting with healthcare standards in building enclosures, finishes and heating, ventilation and air conditioning systems. Our Top Five Snap Shot Visions - others are developing… We see the aging of a relatively wealthy North America driving a change in indoor environmental quality specifications. We see a continuing decline of skilled tradesmen in a rising demand for technology enhanced HVAC systems during a period of demographic significance\u0026hellip;and forecast this will have deep ramifications for building owners and operators. We see an integration of air and water based systems; a hybrid to deliver independently but simultaneously air quality and comfort quality in our buildings. We see a evolution of combining technology and systems into pre-engineered, preassembled, pre-packaged HVAC appliances, which includes proven combustion and power generation equipment. We see healthyheating.com as being an online educational leader and source of unbiased materials contributing to the advancement of science based indoor environmental quality systems. Our Missions are many - here\u0026rsquo;s a few… To educate consumers and design professionals on the relationship between our physiology (body), psychology (mind) and the built environment. To bring public awareness to the otherwise \u0026ldquo;obscure\u0026rdquo; codes, standards and guidelines available to the general public for use in specifying indoor climates and energy management systems. To make unbiased fact based information including architectural and mechanical design and specifications available to the general public. To reposition in the mind of consumers, that elements of architecture, particularly interior design and HVAC must be repositioned as being part of the healthcare industry instead of the construction industry. Our Strategies…what we do\u0026hellip; We use our industry seminars to bring awareness to the marketing of HVAC systems; particularly the evolution of hybrid systems. We support our missions with design seminars through industry associations, educational institutes and private clients. We use editorials in various magazines to discuss industry related issues. We use eBooks to distribute unbiased sound information to help consumers, designers, manufacturers, contractors and distributors deliver health, wellness and comfort systems We make available written specifications and architectural and mechanical schematics, which can be integrated into the clients building contracts. We contract with influential clients to develop missions, strategies, and tactics to fulfill those purposes and visions, which we have in common. Our Tactics…how we do them\u0026hellip; We work with contractors, distributors, engineers, and manufactures on site, in the field, or in the classroom on how to look at the industry through the physiology and psychology of an aging consumer…the body of a 20, 30 or 40 year old is not the same as a 50 to 90 year old…living within buildings built for the youth isn\u0026rsquo;t good business. We train individuals on human physiology and psychology to facilitate the communication between consumer demands and construction deliverables…changes the industry from \u0026ldquo;here\u0026rsquo;s what you get\u0026rdquo; to \u0026ldquo;what does your body need\u0026rdquo;. We reveal the content of \u0026ldquo;obscure\u0026rdquo; codes, standards, and guidelines and make them understandable to the public so individuals can play a greater role in determining what they want to own as a health, wellness, and comfort system in their home. ASHRAE Standard 55 has been around for over a decade yet over 95% of the industry is not aware of its existence. We avoid, detour or debunk specific industry status quo, which prevents consumers from living with improved indoor environments. As one client said to us\u0026hellip;\u0026ldquo;If I as an aging person am building my last space by investing 15% of a construction contract on my homes health, wellness and comfort system…shouldn\u0026rsquo;t I be able to talk with the technicians directly responsible for creating my environment?\u0026rdquo; Makes perfect sense to us! # ","date":"1 January 0001","permalink":"/posts/indoor-environmental-quality-aging-in-place-about-5ac5c93904f44342babf4aec4051af6e/untitled-database-fad9206625414502ba2b7e75fb6ed0c1/where-will-you-find-our-influence-a-browser-search-1c55ef420a4a47dd88042af0d357e0a6/","section":"Posts","summary":"Where will you find our influence? A browser search of www.healthyheating.com will show us to be referenced in technical papers, Masters and Ph.D. Level Theses and course curriculums; and you\u0026rsquo;ll find Robert Bean, R.","title":""},{"content":"Number properties # smallest number not in this website: 80\n","date":"1 January 0001","permalink":"/posts/interesting-number-paradox-wikipedia-6921c10bf5ee4873b289cb4492c9fa65/untitled-database-fdff7866bc734680bad3cbf5526f1866/number-properties-5df4f841ae7a4e10abfea66e6dfacec0/","section":"Posts","summary":"Number properties # smallest number not in this website: 80","title":""},{"content":"Number properties # smallest number not in this website: 309\n","date":"1 January 0001","permalink":"/posts/interesting-number-paradox-wikipedia-6921c10bf5ee4873b289cb4492c9fa65/untitled-database-fdff7866bc734680bad3cbf5526f1866/number-properties-90aa003fb5074adea83e106371ae1ee5/","section":"Posts","summary":"Number properties # smallest number not in this website: 309","title":""},{"content":"OEIS # smallest number not in this website: 17843\n","date":"1 January 0001","permalink":"/posts/interesting-number-paradox-wikipedia-6921c10bf5ee4873b289cb4492c9fa65/untitled-database-fdff7866bc734680bad3cbf5526f1866/oeis-956d498197da46bb848e79a7f8fe08bb/","section":"Posts","summary":"OEIS # smallest number not in this website: 17843","title":""},{"content":"Prime curios # smallest number not in this website: 492 (or 326, if you only count approved curios)\n","date":"1 January 0001","permalink":"/posts/interesting-number-paradox-wikipedia-6921c10bf5ee4873b289cb4492c9fa65/untitled-database-fdff7866bc734680bad3cbf5526f1866/prime-curios-d5578911ac0f45ad8bcd7ead880ff351/","section":"Posts","summary":"Prime curios # smallest number not in this website: 492 (or 326, if you only count approved curios)","title":""},{"content":"Properties of first 5000 integers # smallest number not in this website: 291\n","date":"1 January 0001","permalink":"/posts/interesting-number-paradox-wikipedia-6921c10bf5ee4873b289cb4492c9fa65/untitled-database-fdff7866bc734680bad3cbf5526f1866/properties-of-first-5000-integers-f521228785564ad6965c18370f2c3b32/","section":"Posts","summary":"Properties of first 5000 integers # smallest number not in this website: 291","title":""},{"content":"What\u0026rsquo;s Special About This Number? # smallest number not in this website: 391\n","date":"1 January 0001","permalink":"/posts/interesting-number-paradox-wikipedia-6921c10bf5ee4873b289cb4492c9fa65/untitled-database-fdff7866bc734680bad3cbf5526f1866/whats-special-about-this-number-abba6de5ff624192a1672c546c412b1e/","section":"Posts","summary":"What\u0026rsquo;s Special About This Number? # smallest number not in this website: 391","title":""},{"content":"Wikipedia # smallest number not in this website: 262 (or 275, as 275 is the smallest number having no properties in Wikipedia except prime factorization)\n","date":"1 January 0001","permalink":"/posts/interesting-number-paradox-wikipedia-6921c10bf5ee4873b289cb4492c9fa65/untitled-database-fdff7866bc734680bad3cbf5526f1866/wikipedia-774685a6ac5e462fad43610225b3d4cd/","section":"Posts","summary":"Wikipedia # smallest number not in this website: 262 (or 275, as 275 is the smallest number having no properties in Wikipedia except prime factorization)","title":""},{"content":"Untitled # 1: 3 1 1: 1 2018-11-01: June 1, 2019 2019-02-01: August 1, 2019 50: 75\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-3e1d14fc92d94ba8a196595dd96a0596/untitled-1408a2106fe34a908187d588ac1d03b1/","section":"Posts","summary":"Untitled # 1: 3 1 1: 1 2018-11-01: June 1, 2019 2019-02-01: August 1, 2019 50: 75","title":""},{"content":"Untitled # 1: 2 1 1: 1 2018-11-01: April 1, 2019 2019-02-01: June 1, 2019 50: 50\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-3e1d14fc92d94ba8a196595dd96a0596/untitled-dc0b629298694bed9caff0d6ef78ca32/","section":"Posts","summary":"Untitled # 1: 2 1 1: 1 2018-11-01: April 1, 2019 2019-02-01: June 1, 2019 50: 50","title":""},{"content":"0 # 1: 1 2018-11-01 00:00:00.000: February 1, 2019 12:00 AM (GMT) new: churn\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-47a46934b024488eb7e787fc807a185e/0-a1e574542f6648dc97fe4c0824993010/","section":"Posts","summary":"0 # 1: 1 2018-11-01 00:00:00.000: February 1, 2019 12:00 AM (GMT) new: churn","title":""},{"content":"0 # 1: 1 2018-11-01 00:00:00.000: March 1, 2019 12:00 AM (GMT) 50: January 21, 2020 12:00 AM (GMT)\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-47a46934b024488eb7e787fc807a185e/0-d3110e827c3947ee91bd643c2e6333bc/","section":"Posts","summary":"0 # 1: 1 2018-11-01 00:00:00.000: March 1, 2019 12:00 AM (GMT) 50: January 21, 2020 12:00 AM (GMT)","title":""},{"content":"0 # 1: 1 2018-11-01 00:00:00.000: August 1, 2019 12:00 AM (GMT) new: churn\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-47a46934b024488eb7e787fc807a185e/0-e7567095ff5a438da0fb160a2043a958/","section":"Posts","summary":"0 # 1: 1 2018-11-01 00:00:00.000: August 1, 2019 12:00 AM (GMT) new: churn","title":""},{"content":"50 # 1: 1 2018-11-01 00:00:00.000: April 1, 2019 12:00 AM (GMT) 50: January 21, 2020 5:00 AM (GMT) new: reactivation\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-47a46934b024488eb7e787fc807a185e/50-46adc09cb1b54546853d3092e66aa3ff/","section":"Posts","summary":"50 # 1: 1 2018-11-01 00:00:00.000: April 1, 2019 12:00 AM (GMT) 50: January 21, 2020 5:00 AM (GMT) new: reactivation","title":""},{"content":"50 # 1: 1 2018-11-01 00:00:00.000: December 1, 2018 12:00 AM (GMT) 50: January 21, 2020 12:00 AM (GMT)\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-47a46934b024488eb7e787fc807a185e/50-5cf5c834a7674d1b9002ffed756630d3/","section":"Posts","summary":"50 # 1: 1 2018-11-01 00:00:00.000: December 1, 2018 12:00 AM (GMT) 50: January 21, 2020 12:00 AM (GMT)","title":""},{"content":"50 # 1: 1 2018-11-01 00:00:00.000: January 1, 2019 12:00 AM (GMT) 50: January 21, 2020 12:00 AM (GMT)\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-47a46934b024488eb7e787fc807a185e/50-d5da567af4f2419996547d69836c63ba/","section":"Posts","summary":"50 # 1: 1 2018-11-01 00:00:00.000: January 1, 2019 12:00 AM (GMT) 50: January 21, 2020 12:00 AM (GMT)","title":""},{"content":"50 # 1: 1 2018-11-01 00:00:00.000: May 1, 2019 12:00 AM (GMT) 50: January 21, 2020 12:00 AM (GMT)\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-47a46934b024488eb7e787fc807a185e/50-e6566cc40f794191968b2ba82deff1eb/","section":"Posts","summary":"50 # 1: 1 2018-11-01 00:00:00.000: May 1, 2019 12:00 AM (GMT) 50: January 21, 2020 12:00 AM (GMT)","title":""},{"content":"75 # 1: 1 2018-11-01 00:00:00.000: July 1, 2019 12:00 AM (GMT) 50: January 21, 2020 12:00 AM (GMT)\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-47a46934b024488eb7e787fc807a185e/75-d1f7d9d3799346d9ae74e72bf012bdc1/","section":"Posts","summary":"75 # 1: 1 2018-11-01 00:00:00.000: July 1, 2019 12:00 AM (GMT) 50: January 21, 2020 12:00 AM (GMT)","title":""},{"content":"75 # 1: 1 2018-11-01 00:00:00.000: June 1, 2019 12:00 AM (GMT) 50: January 21, 2020 2:50 AM (GMT) new: upgrade\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-47a46934b024488eb7e787fc807a185e/75-d4fb85b697264eafb0acfdc2c76b0c21/","section":"Posts","summary":"75 # 1: 1 2018-11-01 00:00:00.000: June 1, 2019 12:00 AM (GMT) 50: January 21, 2020 2:50 AM (GMT) new: upgrade","title":""},{"content":"\u0026hellip; # 1: \u0026hellip; new: \u0026hellip;\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-47a46934b024488eb7e787fc807a185e/untitled-f03b5e985a2e4c63bea27be166d0034d/","section":"Posts","summary":"\u0026hellip; # 1: \u0026hellip; new: \u0026hellip;","title":""},{"content":"50 # 1: 1 2018-11-01: December 1, 2018\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-ea5f733c523d45e9bb9abbd7eb94b82e/50-3280449f13f249c480fc47c68050a79d/","section":"Posts","summary":"50 # 1: 1 2018-11-01: December 1, 2018","title":""},{"content":"50 # 1: 1 2018-11-01: April 1, 2019\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-ea5f733c523d45e9bb9abbd7eb94b82e/50-8c35258bd4f040c9b8db1e06134babd8/","section":"Posts","summary":"50 # 1: 1 2018-11-01: April 1, 2019","title":""},{"content":"50 # 1: 1 2018-11-01: January 1, 2019\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-ea5f733c523d45e9bb9abbd7eb94b82e/50-d4fb9323a3c24b8a8428fbf111534f20/","section":"Posts","summary":"50 # 1: 1 2018-11-01: January 1, 2019","title":""},{"content":"50 # 1: 1 2018-11-01: May 1, 2019\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-ea5f733c523d45e9bb9abbd7eb94b82e/50-e4e4ea2ea00a4f82a5187ba21ab2e847/","section":"Posts","summary":"50 # 1: 1 2018-11-01: May 1, 2019","title":""},{"content":"75 # 1: 1 2018-11-01: July 1, 2019\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-ea5f733c523d45e9bb9abbd7eb94b82e/75-53e838ec6543449d8af25baacc8aba2a/","section":"Posts","summary":"75 # 1: 1 2018-11-01: July 1, 2019","title":""},{"content":"75 # 1: 1 2018-11-01: June 1, 2019\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-ea5f733c523d45e9bb9abbd7eb94b82e/75-90d731884a1747b383efb29e5f0ab5c0/","section":"Posts","summary":"75 # 1: 1 2018-11-01: June 1, 2019","title":""},{"content":"\u0026hellip; # 1: \u0026hellip;\n","date":"1 January 0001","permalink":"/posts/modeling-subscription-revenue-63596882e0ec410dbd78a3337a5e3d3f/untitled-database-ea5f733c523d45e9bb9abbd7eb94b82e/untitled-95524e13e589486e80f8b40d01a3a314/","section":"Posts","summary":"\u0026hellip; # 1: \u0026hellip;","title":""},{"content":"Untitled # 1: 7 15: 21 22: 28 29: 0 8: 14\n","date":"1 January 0001","permalink":"/posts/one-page-calendar-2020-612049c234b24043bec632d915d28a90/untitled-database-af0eccb7931e4749844e4271501ccbd4/untitled-3018610669a144c3bb83e30052e63d09/","section":"Posts","summary":"Untitled # 1: 7 15: 21 22: 28 29: 0 8: 14","title":""},{"content":"Untitled # 1: 4 15: 18 22: 25 29: 0 8: 11\n","date":"1 January 0001","permalink":"/posts/one-page-calendar-2020-612049c234b24043bec632d915d28a90/untitled-database-af0eccb7931e4749844e4271501ccbd4/untitled-3a8ed395a2bd47a08fdd8fdf0cb7e5af/","section":"Posts","summary":"Untitled # 1: 4 15: 18 22: 25 29: 0 8: 11","title":""},{"content":"Untitled # 1: 3 15: 17 22: 24 29: 31 8: 10\n","date":"1 January 0001","permalink":"/posts/one-page-calendar-2020-612049c234b24043bec632d915d28a90/untitled-database-af0eccb7931e4749844e4271501ccbd4/untitled-abbc2b15b96b4ad8a586b42f90602931/","section":"Posts","summary":"Untitled # 1: 3 15: 17 22: 24 29: 31 8: 10","title":""},{"content":"Untitled # 1: 6 15: 20 22: 27 29: 0 8: 13\n","date":"1 January 0001","permalink":"/posts/one-page-calendar-2020-612049c234b24043bec632d915d28a90/untitled-database-af0eccb7931e4749844e4271501ccbd4/untitled-b17f197fcaef405cae8f12daa0ad26f5/","section":"Posts","summary":"Untitled # 1: 6 15: 20 22: 27 29: 0 8: 13","title":""},{"content":"Untitled # 1: 2 15: 16 22: 23 29: 30 8: 9\n","date":"1 January 0001","permalink":"/posts/one-page-calendar-2020-612049c234b24043bec632d915d28a90/untitled-database-af0eccb7931e4749844e4271501ccbd4/untitled-c9f9ca4e5e5d47dc8c7a5d32d11d35b3/","section":"Posts","summary":"Untitled # 1: 2 15: 16 22: 23 29: 30 8: 9","title":""},{"content":"Untitled # 1: 5 15: 19 22: 26 29: 0 8: 12\n","date":"1 January 0001","permalink":"/posts/one-page-calendar-2020-612049c234b24043bec632d915d28a90/untitled-database-af0eccb7931e4749844e4271501ccbd4/untitled-fe04b9a17b664a06b9cf3b62f11016ac/","section":"Posts","summary":"Untitled # 1: 5 15: 19 22: 26 29: 0 8: 12","title":""},{"content":"Untitled # 1: 6 15: 20 22: 27 29: 0 8: 13\n","date":"1 January 0001","permalink":"/posts/one-page-calendar-2020-de7e33f37d834c548bf2dcac38dd2971/untitled-database-4adc809041904d6499480ed9a56e3420/untitled-45f30881ba75457d829788f9142f009b/","section":"Posts","summary":"Untitled # 1: 6 15: 20 22: 27 29: 0 8: 13","title":""},{"content":"Untitled # 1: 4 15: 18 22: 25 29: 0 8: 11\n","date":"1 January 0001","permalink":"/posts/one-page-calendar-2020-de7e33f37d834c548bf2dcac38dd2971/untitled-database-4adc809041904d6499480ed9a56e3420/untitled-5d37bdcd52774f22bc1e9e2e37fb591d/","section":"Posts","summary":"Untitled # 1: 4 15: 18 22: 25 29: 0 8: 11","title":""},{"content":"Untitled # 1: 5 15: 19 22: 26 29: 0 8: 12\n","date":"1 January 0001","permalink":"/posts/one-page-calendar-2020-de7e33f37d834c548bf2dcac38dd2971/untitled-database-4adc809041904d6499480ed9a56e3420/untitled-6547469dbfed4503b8c3fffa1b6589ee/","section":"Posts","summary":"Untitled # 1: 5 15: 19 22: 26 29: 0 8: 12","title":""},{"content":"Untitled # 1: 3 15: 17 22: 24 29: 31 8: 10\n","date":"1 January 0001","permalink":"/posts/one-page-calendar-2020-de7e33f37d834c548bf2dcac38dd2971/untitled-database-4adc809041904d6499480ed9a56e3420/untitled-686bc65d3e284809835b25f4724e7221/","section":"Posts","summary":"Untitled # 1: 3 15: 17 22: 24 29: 31 8: 10","title":""},{"content":"Untitled # 1: 7 15: 21 22: 28 29: 0 8: 14\n","date":"1 January 0001","permalink":"/posts/one-page-calendar-2020-de7e33f37d834c548bf2dcac38dd2971/untitled-database-4adc809041904d6499480ed9a56e3420/untitled-7ce2de8b97e34cd39c39fe2bc5c1aa6e/","section":"Posts","summary":"Untitled # 1: 7 15: 21 22: 28 29: 0 8: 14","title":""},{"content":"Untitled # 1: 2 15: 16 22: 23 29: 30 8: 9\n","date":"1 January 0001","permalink":"/posts/one-page-calendar-2020-de7e33f37d834c548bf2dcac38dd2971/untitled-database-4adc809041904d6499480ed9a56e3420/untitled-ba61fa1a85ac4d62ab145aca76061aaa/","section":"Posts","summary":"Untitled # 1: 2 15: 16 22: 23 29: 30 8: 9","title":""},{"content":"Classes # ","date":"1 January 0001","permalink":"/posts/styleguide-style-guides-for-google-originated-open-4b19e8d2bcd54c048e953b060da27c90/untitled-database-d3432e2ce0f742f9921b57ac8c097636/classes-e46c281d2dc94310a874610cc06009e9/","section":"Posts","summary":"Classes # ","title":""},{"content":"Exceptions # ","date":"1 January 0001","permalink":"/posts/styleguide-style-guides-for-google-originated-open-4b19e8d2bcd54c048e953b060da27c90/untitled-database-d3432e2ce0f742f9921b57ac8c097636/exceptions-55b118c2b1ef4607996664d6232f375e/","section":"Posts","summary":"Exceptions # ","title":""},{"content":"Function/Method Parameters # ","date":"1 January 0001","permalink":"/posts/styleguide-style-guides-for-google-originated-open-4b19e8d2bcd54c048e953b060da27c90/untitled-database-d3432e2ce0f742f9921b57ac8c097636/function-method-parameters-346142ae63e7429ba873d6a4a7339890/","section":"Posts","summary":"Function/Method Parameters # ","title":""},{"content":"Functions # ","date":"1 January 0001","permalink":"/posts/styleguide-style-guides-for-google-originated-open-4b19e8d2bcd54c048e953b060da27c90/untitled-database-d3432e2ce0f742f9921b57ac8c097636/functions-e600ce3d39cf4b78945bcf3df009646b/","section":"Posts","summary":"Functions # ","title":""},{"content":"Global/Class Constants # ","date":"1 January 0001","permalink":"/posts/styleguide-style-guides-for-google-originated-open-4b19e8d2bcd54c048e953b060da27c90/untitled-database-d3432e2ce0f742f9921b57ac8c097636/global-class-constants-7c995e5a5e494d6899107890b597b8e1/","section":"Posts","summary":"Global/Class Constants # ","title":""},{"content":"Global/Class Variables # ","date":"1 January 0001","permalink":"/posts/styleguide-style-guides-for-google-originated-open-4b19e8d2bcd54c048e953b060da27c90/untitled-database-d3432e2ce0f742f9921b57ac8c097636/global-class-variables-bf60a1f0551242168289e921e14dee06/","section":"Posts","summary":"Global/Class Variables # ","title":""},{"content":"Instance Variables # ","date":"1 January 0001","permalink":"/posts/styleguide-style-guides-for-google-originated-open-4b19e8d2bcd54c048e953b060da27c90/untitled-database-d3432e2ce0f742f9921b57ac8c097636/instance-variables-f6656ef6ef394ce7b5acce1217e242be/","section":"Posts","summary":"Instance Variables # ","title":""},{"content":"Local Variables # ","date":"1 January 0001","permalink":"/posts/styleguide-style-guides-for-google-originated-open-4b19e8d2bcd54c048e953b060da27c90/untitled-database-d3432e2ce0f742f9921b57ac8c097636/local-variables-ff9a8d0d2b8e4af4a0c976f0ede66298/","section":"Posts","summary":"Local Variables # ","title":""},{"content":"Method Names # ","date":"1 January 0001","permalink":"/posts/styleguide-style-guides-for-google-originated-open-4b19e8d2bcd54c048e953b060da27c90/untitled-database-d3432e2ce0f742f9921b57ac8c097636/method-names-40e6e8cb84424d9fb4124de904b0a5a3/","section":"Posts","summary":"Method Names # ","title":""},{"content":"Modules # ","date":"1 January 0001","permalink":"/posts/styleguide-style-guides-for-google-originated-open-4b19e8d2bcd54c048e953b060da27c90/untitled-database-d3432e2ce0f742f9921b57ac8c097636/modules-41af06bb56e6446bafff916f8ca47921/","section":"Posts","summary":"Modules # ","title":""},{"content":"Packages # ","date":"1 January 0001","permalink":"/posts/styleguide-style-guides-for-google-originated-open-4b19e8d2bcd54c048e953b060da27c90/untitled-database-d3432e2ce0f742f9921b57ac8c097636/packages-594ee649d0564892951a18bb50f85e31/","section":"Posts","summary":"Packages # ","title":""},{"content":"(This essay is derived from a talk at the 2006 Startup School.)The startups we\u0026rsquo;ve funded so far are pretty quick, but they seem quicker to learn some lessons than others. I think it\u0026rsquo;s because some things about startups are kind of counterintuitive.We\u0026rsquo;ve now invested in enough companies that I\u0026rsquo;ve learned a trick for determining which points are the counterintuitive ones: they\u0026rsquo;re the ones I have to keep repeating.So I\u0026rsquo;m going to number these points, and maybe with future startups I\u0026rsquo;ll be able to pull off a form of Huffman coding. I\u0026rsquo;ll make them all read this, and then instead of nagging them in detail, I\u0026rsquo;ll just be able to say: number four! 1. Release Early.The thing I probably repeat most is this recipe for a startup: get a version 1 out fast, then improve it based on users\u0026rsquo; reactions.By \u0026ldquo;release early\u0026rdquo; I don\u0026rsquo;t mean you should release something full of bugs, but that you should release something minimal. Users hate bugs, but they don\u0026rsquo;t seem to mind a minimal version 1, if there\u0026rsquo;s more coming soon.There are several reasons it pays to get version 1 done fast. One is that this is simply the right way to write software, whether for a startup or not. I\u0026rsquo;ve been repeating that since 1993, and I haven\u0026rsquo;t seen much since to contradict it. I\u0026rsquo;ve seen a lot of startups die because they were too slow to release stuff, and none because they were too quick. [1]One of the things that will surprise you if you build something popular is that you won\u0026rsquo;t know your users. Reddit now has almost half a million unique visitors a month. Who are all those people? They have no idea. No web startup does. And since you don\u0026rsquo;t know your users, it\u0026rsquo;s dangerous to guess what they\u0026rsquo;ll like. Better to release something and let them tell you.Wufoo took this to heart and released their form-builder before the underlying database. You can\u0026rsquo;t even drive the thing yet, but 83,000 people came to sit in the driver\u0026rsquo;s seat and hold the steering wheel. And Wufoo got valuable feedback from it: Linux users complained they used too much Flash, so they rewrote their software not to. If they\u0026rsquo;d waited to release everything at once, they wouldn\u0026rsquo;t have discovered this problem till it was more deeply wired in.Even if you had no users, it would still be important to release quickly, because for a startup the initial release acts as a shakedown cruise. If anything major is broken\u0026ndash; if the idea\u0026rsquo;s no good, for example, or the founders hate one another\u0026ndash; the stress of getting that first version out will expose it. And if you have such problems you want to find them early.Perhaps the most important reason to release early, though, is that it makes you work harder. When you\u0026rsquo;re working on something that isn\u0026rsquo;t released, problems are intriguing. In something that\u0026rsquo;s out there, problems are alarming. There is a lot more urgency once you release. And I think that\u0026rsquo;s precisely why people put it off. They know they\u0026rsquo;ll have to work a lot harder once they do. [2] 2. Keep Pumping Out Features.Of course, \u0026ldquo;release early\u0026rdquo; has a second component, without which it would be bad advice. If you\u0026rsquo;re going to start with something that doesn\u0026rsquo;t do much, you better improve it fast.What I find myself repeating is \u0026ldquo;pump out features.\u0026rdquo; And this rule isn\u0026rsquo;t just for the initial stages. This is something all startups should do for as long as they want to be considered startups.I don\u0026rsquo;t mean, of course, that you should make your application ever more complex. By \u0026ldquo;feature\u0026rdquo; I mean one unit of hacking\u0026ndash; one quantum of making users\u0026rsquo; lives better.As with exercise, improvements beget improvements. If you run every day, you\u0026rsquo;ll probably feel like running tomorrow. But if you skip running for a couple weeks, it will be an effort to drag yourself out. So it is with hacking: the more ideas you implement, the more ideas you\u0026rsquo;ll have. You should make your system better at least in some small way every day or two.This is not just a good way to get development done; it is also a form of marketing. Users love a site that\u0026rsquo;s constantly improving. In fact, users expect a site to improve. Imagine if you visited a site that seemed very good, and then returned two months later and not one thing had changed. Wouldn\u0026rsquo;t it start to seem lame? [3]They\u0026rsquo;ll like you even better when you improve in response to their comments, because customers are used to companies ignoring them. If you\u0026rsquo;re the rare exception\u0026ndash; a company that actually listens\u0026ndash; you\u0026rsquo;ll generate fanatical loyalty. You won\u0026rsquo;t need to advertise, because your users will do it for you.This seems obvious too, so why do I have to keep repeating it? I think the problem here is that people get used to how things are. Once a product gets past the stage where it has glaring flaws, you start to get used to it, and gradually whatever features it happens to have become its identity. For example, I doubt many people at Yahoo (or Google for that matter) realized how much better web mail could be till Paul Buchheit showed them.I think the solution is to assume that anything you\u0026rsquo;ve made is far short of what it could be. Force yourself, as a sort of intellectual exercise, to keep thinking of improvements. Ok, sure, what you have is perfect. But if you had to change something, what would it be?If your product seems finished, there are two possible explanations: (a) it is finished, or (b) you lack imagination. Experience suggests (b) is a thousand times more likely. 3. Make Users Happy.Improving constantly is an instance of a more general rule: make users happy. One thing all startups have in common is that they can\u0026rsquo;t force anyone to do anything. They can\u0026rsquo;t force anyone to use their software, and they can\u0026rsquo;t force anyone to do deals with them. A startup has to sing for its supper. That\u0026rsquo;s why the successful ones make great things. They have to, or die.When you\u0026rsquo;re running a startup you feel like a little bit of debris blown about by powerful winds. The most powerful wind is users. They can either catch you and loft you up into the sky, as they did with Google, or leave you flat on the pavement, as they do with most startups. Users are a fickle wind, but more powerful than any other. If they take you up, no competitor can keep you down.As a little piece of debris, the rational thing for you to do is not to lie flat, but to curl yourself into a shape the wind will catch.I like the wind metaphor because it reminds you how impersonal the stream of traffic is. The vast majority of people who visit your site will be casual visitors. It\u0026rsquo;s them you have to design your site for. The people who really care will find what they want by themselves.The median visitor will arrive with their finger poised on the Back button. Think about your own experience: most links you follow lead to something lame. Anyone who has used the web for more than a couple weeks has been trained to click on Back after following a link. So your site has to say \u0026ldquo;Wait! Don\u0026rsquo;t click on Back. This site isn\u0026rsquo;t lame. Look at this, for example.\u0026ldquo;There are two things you have to do to make people pause. The most important is to explain, as concisely as possible, what the hell your site is about. How often have you visited a site that seemed to assume you already knew what they did? For example, the corporate site that says the company makes enterprise content management solutions for business that enable organizations to unify people, content and processes to minimize business risk, accelerate time-to-value and sustain lower total cost of ownership. An established company may get away with such an opaque description, but no startup can. A startup should be able to explain in one or two sentences exactly what it does. [4] And not just to users. You need this for everyone: investors, acquirers, partners, reporters, potential employees, and even current employees. You probably shouldn\u0026rsquo;t even start a company to do something that can\u0026rsquo;t be described compellingly in one or two sentences.The other thing I repeat is to give people everything you\u0026rsquo;ve got, right away. If you have something impressive, try to put it on the front page, because that\u0026rsquo;s the only one most visitors will see. Though indeed there\u0026rsquo;s a paradox here: the more you push the good stuff toward the front, the more likely visitors are to explore further. [5]In the best case these two suggestions get combined: you tell visitors what your site is about by showing them. One of the standard pieces of advice in fiction writing is \u0026ldquo;show, don\u0026rsquo;t tell.\u0026rdquo; Don\u0026rsquo;t say that a character\u0026rsquo;s angry; have him grind his teeth, or break his pencil in half. Nothing will explain what your site does so well as using it.The industry term here is \u0026ldquo;conversion.\u0026rdquo; The job of your site is to convert casual visitors into users\u0026ndash; whatever your definition of a user is. You can measure this in your growth rate. Either your site is catching on, or it isn\u0026rsquo;t, and you must know which. If you have decent growth, you\u0026rsquo;ll win in the end, no matter how obscure you are now. And if you don\u0026rsquo;t, you need to fix something. 4. Fear the Right Things.Another thing I find myself saying a lot is \u0026ldquo;don\u0026rsquo;t worry.\u0026rdquo; Actually, it\u0026rsquo;s more often \u0026ldquo;don\u0026rsquo;t worry about this; worry about that instead.\u0026rdquo; Startups are right to be paranoid, but they sometimes fear the wrong things.Most visible disasters are not so alarming as they seem. Disasters are normal in a startup: a founder quits, you discover a patent that covers what you\u0026rsquo;re doing, your servers keep crashing, you run into an insoluble technical problem, you have to change your name, a deal falls through\u0026ndash; these are all par for the course. They won\u0026rsquo;t kill you unless you let them.Nor will most competitors. A lot of startups worry \u0026ldquo;what if Google builds something like us?\u0026rdquo; Actually big companies are not the ones you have to worry about\u0026ndash; not even Google. The people at Google are smart, but no smarter than you; they\u0026rsquo;re not as motivated, because Google is not going to go out of business if this one product fails; and even at Google they have a lot of bureaucracy to slow them down.What you should fear, as a startup, is not the established players, but other startups you don\u0026rsquo;t know exist yet. They\u0026rsquo;re way more dangerous than Google because, like you, they\u0026rsquo;re cornered animals.Looking just at existing competitors can give you a false sense of security. You should compete against what someone else could be doing, not just what you can see people doing. A corollary is that you shouldn\u0026rsquo;t relax just because you have no visible competitors yet. No matter what your idea, there\u0026rsquo;s someone else out there working on the same thing.That\u0026rsquo;s the downside of it being easier to start a startup: more people are doing it. But I disagree with Caterina Fake when she says that makes this a bad time to start a startup. More people are starting startups, but not as many more as could. Most college graduates still think they have to get a job. The average person can\u0026rsquo;t ignore something that\u0026rsquo;s been beaten into their head since they were three just because serving web pages recently got a lot cheaper.And in any case, competitors are not the biggest threat. Way more startups hose themselves than get crushed by competitors. There are a lot of ways to do it, but the three main ones are internal disputes, inertia, and ignoring users. Each is, by itself, enough to kill you. But if I had to pick the worst, it would be ignoring users. If you want a recipe for a startup that\u0026rsquo;s going to die, here it is: a couple of founders who have some great idea they know everyone is going to love, and that\u0026rsquo;s what they\u0026rsquo;re going to build, no matter what.Almost everyone\u0026rsquo;s initial plan is broken. If companies stuck to their initial plans, Microsoft would be selling programming languages, and Apple would be selling printed circuit boards. In both cases their customers told them what their business should be\u0026ndash; and they were smart enough to listen.As Richard Feynman said, the imagination of nature is greater than the imagination of man. You\u0026rsquo;ll find more interesting things by looking at the world than you could ever produce just by thinking. This principle is very powerful. It\u0026rsquo;s why the best abstract painting still falls short of Leonardo, for example. And it applies to startups too. No idea for a product could ever be so clever as the ones you can discover by smashing a beam of prototypes into a beam of users. 5. Commitment Is a Self-Fulfilling Prophecy.I now have enough experience with startups to be able to say what the most important quality is in a startup founder, and it\u0026rsquo;s not what you might think. The most important quality in a startup founder is determination. Not intelligence\u0026ndash; determination.This is a little depressing. I\u0026rsquo;d like to believe Viaweb succeeded because we were smart, not merely determined. A lot of people in the startup world want to believe that. Not just founders, but investors too. They like the idea of inhabiting a world ruled by intelligence. And you can tell they really believe this, because it affects their investment decisions.Time after time VCs invest in startups founded by eminent professors. This may work in biotech, where a lot of startups simply commercialize existing research, but in software you want to invest in students, not professors. Microsoft, Yahoo, and Google were all founded by people who dropped out of school to do it. What students lack in experience they more than make up in dedication.Of course, if you want to get rich, it\u0026rsquo;s not enough merely to be determined. You have to be smart too, right? I\u0026rsquo;d like to think so, but I\u0026rsquo;ve had an experience that convinced me otherwise: I spent several years living in New York.You can lose quite a lot in the brains department and it won\u0026rsquo;t kill you. But lose even a little bit in the commitment department, and that will kill you very rapidly.Running a startup is like walking on your hands: it\u0026rsquo;s possible, but it requires extraordinary effort. If an ordinary employee were asked to do the things a startup founder has to, he\u0026rsquo;d be very indignant. Imagine if you were hired at some big company, and in addition to writing software ten times faster than you\u0026rsquo;d ever had to before, they expected you to answer support calls, administer the servers, design the web site, cold-call customers, find the company office space, and go out and get everyone lunch.And to do all this not in the calm, womb-like atmosphere of a big company, but against a backdrop of constant disasters. That\u0026rsquo;s the part that really demands determination. In a startup, there\u0026rsquo;s always some disaster happening. So if you\u0026rsquo;re the least bit inclined to find an excuse to quit, there\u0026rsquo;s always one right there.But if you lack commitment, chances are it will have been hurting you long before you actually quit. Everyone who deals with startups knows how important commitment is, so if they sense you\u0026rsquo;re ambivalent, they won\u0026rsquo;t give you much attention. If you lack commitment, you\u0026rsquo;ll just find that for some mysterious reason good things happen to your competitors but not to you. If you lack commitment, it will seem to you that you\u0026rsquo;re unlucky.Whereas if you\u0026rsquo;re determined to stick around, people will pay attention to you, because odds are they\u0026rsquo;ll have to deal with you later. You\u0026rsquo;re a local, not just a tourist, so everyone has to come to terms with you.At Y Combinator we sometimes mistakenly fund teams who have the attitude that they\u0026rsquo;re going to give this startup thing a shot for three months, and if something great happens, they\u0026rsquo;ll stick with it\u0026ndash; \u0026ldquo;something great\u0026rdquo; meaning either that someone wants to buy them or invest millions of dollars in them. But if this is your attitude, \u0026ldquo;something great\u0026rdquo; is very unlikely to happen to you, because both acquirers and investors judge you by your level of commitment.If an acquirer thinks you\u0026rsquo;re going to stick around no matter what, they\u0026rsquo;ll be more likely to buy you, because if they don\u0026rsquo;t and you stick around, you\u0026rsquo;ll probably grow, your price will go up, and they\u0026rsquo;ll be left wishing they\u0026rsquo;d bought you earlier. Ditto for investors. What really motivates investors, even big VCs, is not the hope of good returns, but the fear of missing out. [6] So if you make it clear you\u0026rsquo;re going to succeed no matter what, and the only reason you need them is to make it happen a little faster, you\u0026rsquo;re much more likely to get money.You can\u0026rsquo;t fake this. The only way to convince everyone that you\u0026rsquo;re ready to fight to the death is actually to be ready to.You have to be the right kind of determined, though. I carefully chose the word determined rather than stubborn, because stubbornness is a disastrous quality in a startup. You have to be determined, but flexible, like a running back. A successful running back doesn\u0026rsquo;t just put his head down and try to run through people. He improvises: if someone appears in front of him, he runs around them; if someone tries to grab him, he spins out of their grip; he\u0026rsquo;ll even run in the wrong direction briefly if that will help. The one thing he\u0026rsquo;ll never do is stand still. [7] 6. There Is Always Room.I was talking recently to a startup founder about whether it might be good to add a social component to their software. He said he didn\u0026rsquo;t think so, because the whole social thing was tapped out. Really? So in a hundred years the only social networking sites will be the Facebook, MySpace, Flickr, and Del.icio.us? Not likely.There is always room for new stuff. At every point in history, even the darkest bits of the dark ages, people were discovering things that made everyone say \u0026ldquo;why didn\u0026rsquo;t anyone think of that before?\u0026rdquo; We know this continued to be true up till 2004, when the Facebook was founded\u0026ndash; though strictly speaking someone else did think of that.The reason we don\u0026rsquo;t see the opportunities all around us is that we adjust to however things are, and assume that\u0026rsquo;s how things have to be. For example, it would seem crazy to most people to try to make a better search engine than Google. Surely that field, at least, is tapped out. Really? In a hundred years\u0026ndash; or even twenty\u0026ndash; are people still going to search for information using something like the current Google? Even Google probably doesn\u0026rsquo;t think that.In particular, I don\u0026rsquo;t think there\u0026rsquo;s any limit to the number of startups. Sometimes you hear people saying \u0026ldquo;All these guys starting startups now are going to be disappointed. How many little startups are Google and Yahoo going to buy, after all?\u0026rdquo; That sounds cleverly skeptical, but I can prove it\u0026rsquo;s mistaken. No one proposes that there\u0026rsquo;s some limit to the number of people who can be employed in an economy consisting of big, slow-moving companies with a couple thousand people each. Why should there be any limit to the number who could be employed by small, fast-moving companies with ten each? It seems to me the only limit would be the number of people who want to work that hard.The limit on the number of startups is not the number that can get acquired by Google and Yahoo\u0026ndash; though it seems even that should be unlimited, if the startups were actually worth buying\u0026ndash; but the amount of wealth that can be created. And I don\u0026rsquo;t think there\u0026rsquo;s any limit on that, except cosmological ones.So for all practical purposes, there is no limit to the number of startups. Startups make wealth, which means they make things people want, and if there\u0026rsquo;s a limit on the number of things people want, we are nowhere near it. I still don\u0026rsquo;t even have a flying car. 7. Don\u0026rsquo;t Get Your Hopes Up.This is another one I\u0026rsquo;ve been repeating since long before Y Combinator. It was practically the corporate motto at Viaweb.Startup founders are naturally optimistic. They wouldn\u0026rsquo;t do it otherwise. But you should treat your optimism the way you\u0026rsquo;d treat the core of a nuclear reactor: as a source of power that\u0026rsquo;s also very dangerous. You have to build a shield around it, or it will fry you.The shielding of a reactor is not uniform; the reactor would be useless if it were. It\u0026rsquo;s pierced in a few places to let pipes in. An optimism shield has to be pierced too. I think the place to draw the line is between what you expect of yourself, and what you expect of other people. It\u0026rsquo;s ok to be optimistic about what you can do, but assume the worst about machines and other people.This is particularly necessary in a startup, because you tend to be pushing the limits of whatever you\u0026rsquo;re doing. So things don\u0026rsquo;t happen in the smooth, predictable way they do in the rest of the world. Things change suddenly, and usually for the worse.Shielding your optimism is nowhere more important than with deals. If your startup is doing a deal, just assume it\u0026rsquo;s not going to happen. The VCs who say they\u0026rsquo;re going to invest in you aren\u0026rsquo;t. The company that says they\u0026rsquo;re going to buy you isn\u0026rsquo;t. The big customer who wants to use your system in their whole company won\u0026rsquo;t. Then if things work out you can be pleasantly surprised.The reason I warn startups not to get their hopes up is not to save them from being disappointed when things fall through. It\u0026rsquo;s for a more practical reason: to prevent them from leaning their company against something that\u0026rsquo;s going to fall over, taking them with it.For example, if someone says they want to invest in you, there\u0026rsquo;s a natural tendency to stop looking for other investors. That\u0026rsquo;s why people proposing deals seem so positive: they want you to stop looking. And you want to stop too, because doing deals is a pain. Raising money, in particular, is a huge time sink. So you have to consciously force yourself to keep looking.Even if you ultimately do the first deal, it will be to your advantage to have kept looking, because you\u0026rsquo;ll get better terms. Deals are dynamic; unless you\u0026rsquo;re negotiating with someone unusually honest, there\u0026rsquo;s not a single point where you shake hands and the deal\u0026rsquo;s done. There are usually a lot of subsidiary questions to be cleared up after the handshake, and if the other side senses weakness\u0026ndash; if they sense you need this deal\u0026ndash; they will be very tempted to screw you in the details.VCs and corp dev guys are professional negotiators. They\u0026rsquo;re trained to take advantage of weakness. [8] So while they\u0026rsquo;re often nice guys, they just can\u0026rsquo;t help it. And as pros they do this more than you. So don\u0026rsquo;t even try to bluff them. The only way a startup can have any leverage in a deal is genuinely not to need it. And if you don\u0026rsquo;t believe in a deal, you\u0026rsquo;ll be less likely to depend on it.So I want to plant a hypnotic suggestion in your heads: when you hear someone say the words \u0026ldquo;we want to invest in you\u0026rdquo; or \u0026ldquo;we want to acquire you,\u0026rdquo; I want the following phrase to appear automatically in your head: don\u0026rsquo;t get your hopes up. Just continue running your company as if this deal didn\u0026rsquo;t exist. Nothing is more likely to make it close.The way to succeed in a startup is to focus on the goal of getting lots of users, and keep walking swiftly toward it while investors and acquirers scurry alongside trying to wave money in your face. Speed, not MoneyThe way I\u0026rsquo;ve described it, starting a startup sounds pretty stressful. It is. When I talk to the founders of the companies we\u0026rsquo;ve funded, they all say the same thing: I knew it would be hard, but I didn\u0026rsquo;t realize it would be this hard.So why do it? It would be worth enduring a lot of pain and stress to do something grand or heroic, but just to make money? Is making money really that important?No, not really. It seems ridiculous to me when people take business too seriously. I regard making money as a boring errand to be got out of the way as soon as possible. There is nothing grand or heroic about starting a startup per se.So why do I spend so much time thinking about startups? I\u0026rsquo;ll tell you why. Economically, a startup is best seen not as a way to get rich, but as a way to work faster. You have to make a living, and a startup is a way to get that done quickly, instead of letting it drag on through your whole life. [9]We take it for granted most of the time, but human life is fairly miraculous. It is also palpably short. You\u0026rsquo;re given this marvellous thing, and then poof, it\u0026rsquo;s taken away. You can see why people invent gods to explain it. But even to people who don\u0026rsquo;t believe in gods, life commands respect. There are times in most of our lives when the days go by in a blur, and almost everyone has a sense, when this happens, of wasting something precious. As Ben Franklin said, if you love life, don\u0026rsquo;t waste time, because time is what life is made of.So no, there\u0026rsquo;s nothing particularly grand about making money. That\u0026rsquo;s not what makes startups worth the trouble. What\u0026rsquo;s important about startups is the speed. By compressing the dull but necessary task of making a living into the smallest possible time, you show respect for life, and there is something grand about that.Notes[1] Startups can die from releasing something full of bugs, and not fixing them fast enough, but I don\u0026rsquo;t know of any that died from releasing something stable but minimal very early, then promptly improving it.[2] I know this is why I haven\u0026rsquo;t released Arc. The moment I do, I\u0026rsquo;ll have people nagging me for features.[3] A web site is different from a book or movie or desktop application in this respect. Users judge a site not as a single snapshot, but as an animation with multiple frames. Of the two, I\u0026rsquo;d say the rate of improvement is more important to users than where you currently are.[4] It should not always tell this to users, however. For example, MySpace is basically a replacement mall for mallrats. But it was wiser for them, initially, to pretend that the site was about bands.[5] Similarly, don\u0026rsquo;t make users register to try your site. Maybe what you have is so valuable that visitors should gladly register to get at it. But they\u0026rsquo;ve been trained to expect the opposite. Most of the things they\u0026rsquo;ve tried on the web have sucked\u0026ndash; and probably especially those that made them register.[6] VCs have rational reasons for behaving this way. They don\u0026rsquo;t make their money (if they make money) off their median investments. In a typical fund, half the companies fail, most of the rest generate mediocre returns, and one or two \u0026ldquo;make the fund\u0026rdquo; by succeeding spectacularly. So if they miss just a few of the most promising opportunities, it could hose the whole fund.[7] The attitude of a running back doesn\u0026rsquo;t translate to soccer. Though it looks great when a forward dribbles past multiple defenders, a player who persists in trying such things will do worse in the long term than one who passes.[8] The reason Y Combinator never negotiates valuations is that we\u0026rsquo;re not professional negotiators, and don\u0026rsquo;t want to turn into them.[9] There are two ways to do work you love: (a) to make money, then work on what you love, or (b) to get a job where you get paid to work on stuff you love. In practice the first phases of both consist mostly of unedifying schleps, and in (b) the second phase is less secure.Thanks to Sam Altman, Trevor Blackwell, Beau Hartshorne, Jessica Livingston, and Robert Morris for reading drafts of this. # ","date":"1 January 0001","permalink":"/posts/the-hardest-lessons-for-startups-to-learn-060af7a21fbf4dd3bcf46a32c4b0af24/untitled-database-c67ea38f4bc3482ba53a532657711c73/this-essay-is-derived-from-a-talk-at-the-2006-sta-7b7ce785485e46cd82bf00ad7b311b48/","section":"Posts","summary":"(This essay is derived from a talk at the 2006 Startup School.)The startups we\u0026rsquo;ve funded so far are pretty quick, but they seem quicker to learn some lessons than others.","title":""},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]